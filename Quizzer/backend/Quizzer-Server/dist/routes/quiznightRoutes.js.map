{"version":3,"sources":["../../src/routes/quiznightRoutes.js"],"names":["quiznightRoute","post","req","res","quiznightCode","generate","length","charset","qn","_id","teams","rounds","addQuiznightToCache","save","then","send","code","params","quiznightId","roundId","body","forEach","element","hasBeenReviewed","findOne","newRounds","data","parseInt","chosenQuestions","addChosenQuestionsToRound","update","$set","catch","Error","get","find"],"mappings":";;;;;;AAAA;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;kBAEe,YAAM;AACnB,MAAIA,iBAAiB,sBAArB;;AAEAA,iBAAeC,IAAf,CAAoB,GAApB,EAAyB,UAACC,GAAD,EAAMC,GAAN,EAAc;;AAEpC,QAAIC,gBAAgB,uBAAaC,QAAb,CAAsB;AACxCC,cAAQ,CADgC;AAExCC,eAAS;AAF+B,KAAtB,CAApB;;AAKA,QAAIC,KAAK,wBAAc;AACrBC,WAAKL,aADgB;AAErBM,aAAO,EAFc;AAGrBC,cAAQ;AAHa,KAAd,CAAT;;AAMA,oBACEC,mBADF,CACsBR,aADtB;;AAGD,0DAAqCA,aAArC;AACAI,OAAGK,IAAH,GACGC,IADH,CACQ,YAAM;AACV,aAAOX,IAAIY,IAAJ,CAAS,EAAEC,MAAMZ,aAAR,EAAT,CAAP;AACD,KAHH;AAID,GArBD;;AAuBAJ,iBAAeC,IAAf,CAAoB,+BAApB,EAAqD,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjE,QAAID,IAAIe,MAAJ,CAAWC,WAAX,IAA0BhB,IAAIe,MAAJ,CAAWE,OAAzC,EAAkD;;AAEhDjB,UAAIkB,IAAJ,CAASC,OAAT,CAAiB,mBAAW;AAC1BC,gBAAQC,eAAR,GAA0B,KAA1B;AACD,OAFD;;AAIA,0BAAUC,OAAV,CAAkB,EAAEf,KAAKP,IAAIe,MAAJ,CAAWC,WAAlB,EAAlB,EAAmDJ,IAAnD,CAAwD,gBAAQ;;AAE9D,YAAMW,yCAAgBC,KAAKf,MAArB,EAAN;AACAc,kBAAUE,SAASzB,IAAIe,MAAJ,CAAWE,OAApB,IAA8B,CAAxC,EAA2CS,eAA3C,GAA6D1B,IAAIkB,IAAjE;;AAEA,wBACGS,yBADH,CAC6B3B,IAAIe,MAAJ,CAAWC,WADxC,EACqDhB,IAAIkB,IADzD;;AAGA,4BAAUU,MAAV,CACE,EAAErB,KAAKP,IAAIe,MAAJ,CAAWC,WAAlB,EADF,EAEE;AACEa,gBAAM;AACJpB,oBAAQc;AADJ;AADR,SAFF,EAOEX,IAPF,CAOO;AAAA,iBAAQX,IAAIY,IAAJ,CAAS,OAAT,CAAR;AAAA,SAPP,EAOkCiB,KAPlC,CAOwC,eAAO;AAAC,gBAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AAA0C,SAP1F;AAQD,OAhBD;AAiBD;AACF,GAzBD;;AA2BAjC,iBAAekC,GAAf,CAAmB,GAAnB,EAAwB,UAAChC,GAAD,EAAMC,GAAN,EAAc;AACpC,wBAAUgC,IAAV,CAAe,EAAf,EAAmBrB,IAAnB,CAAwB,gBAAQ;AAC9B,aAAOX,IAAIY,IAAJ,CAASW,IAAT,CAAP;AACD,KAFD;AAGD,GAJD;;AAMA,SAAO1B,cAAP;AACD,C","file":"quiznightRoutes.js","sourcesContent":["import { version } from '../../package.json';\nimport { Router } from 'express';\n\nimport QuestionModel from '../models/Question';\nimport Quiznight from '../models/Quiznight';\nimport randomstring from 'randomstring';\nimport { createWebsocketNamespaceForQuiznight } from '../websockets';\nimport LocalDataStoreHandler from '../websockets/data-stores/local';\n\nexport default () => {\n  let quiznightRoute = Router();\n\n  quiznightRoute.post('/', (req, res) => {\n\n     let quiznightCode = randomstring.generate({\n       length: 6,\n       charset: 'alphanumeric'\n     });\n\n     let qn = new Quiznight({\n       _id: quiznightCode,\n       teams: [],\n       rounds: []\n     });\n \n     LocalDataStoreHandler\n      .addQuiznightToCache(quiznightCode);\n\n    createWebsocketNamespaceForQuiznight(quiznightCode);\n    qn.save()\n      .then(() => {\n        return res.send({ code: quiznightCode })\n      });\n  });\n\n  quiznightRoute.post('/:quiznightId/rounds/:roundId', (req, res) => {\n    if (req.params.quiznightId && req.params.roundId) {\n\n      req.body.forEach(element => {\n        element.hasBeenReviewed = false;\n      });\n\n      Quiznight.findOne({ _id: req.params.quiznightId }).then(data => {\n       \n        const newRounds = [...data.rounds];\n        newRounds[parseInt(req.params.roundId) -1].chosenQuestions = req.body\n\n        LocalDataStoreHandler\n          .addChosenQuestionsToRound(req.params.quiznightId, req.body);\n\n        Quiznight.update(\n          { _id: req.params.quiznightId},\n          {\n            $set: {\n              rounds: newRounds\n            }\n          }\n        ).then(data => res.send(\"saved\")).catch(err => {throw new Error('Can not save questions')})\n      });\n    }\n  });\n\n  quiznightRoute.get('/', (req, res) => {\n    Quiznight.find({}).then(data => {\n      return res.send(data);\n    })\n  })\n\n  return quiznightRoute;\n}"]}