{"version":3,"sources":["../../../../src/websockets/messaging/teams/from-teams.js"],"names":["socket","quiznightNamespace","on","CONNECT_TEAM","message","quiznightCode","addTeamConnectionToCache","teamName","saveNewTeamInQuiznightToCache","then","toNamespace","usingSocket","sendMessageToQuizmaster","TEAM_JOINED","socketId","id","sendMessageToSocketViaId","PENDING","join","TEAMS","SUBMIT_ANSWER","qnCode","saveAnswerOfTeamInRoundToCache","round","question","answer","getCurrentRoundInQuiznight","ANSWER_RECEIVED","reSubmit","sendMessageToAllScoreboards","ANSWER_SUBMITTED","hasAnswered"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAEe,UAACA,MAAD,EAASC,kBAAT,EAAgC;AAC7CD,SAAOE,EAAP,CAAU,wBAAcC,YAAxB,EAAsC,UAACC,OAAD,EAAa;AACjD,QAAIC,gBAAgB,uCAA2BL,MAA3B,CAApB;;AAEA,oBACGM,wBADH,CAC4BD,aAD5B,EAC2CD,QAAQG,QADnD,EAC6DP,MAD7D;;AAGA,oBACGQ,6BADH,CACiCH,aADjC,EACgDD,QAAQG,QADxD;;AAGA,uBACGC,6BADH,CACiCH,aADjC,EACgDD,QAAQG,QADxD,EAEGE,IAFH,CAEQ,YAAM;AACV,6BACGC,WADH,CACeT,kBADf,EAEGU,WAFH,CAEeX,MAFf,EAGGY,uBAHH,CAG2B,wBAAcC,WAHzC,EAGsD;AAClDN,kBAAUH,QAAQG,QADgC;AAElDO,kBAAUd,OAAOe;AAFiC,OAHtD;;AAQA,wBACGL,WADH,CACeT,kBADf,EAEGU,WAFH,CAEeX,MAFf,EAGGgB,wBAHH,CAG4BhB,OAAOe,EAHnC,EAGuC,wBAAcE,OAHrD,EAG8D,iEAH9D;;AAKAjB,aAAOkB,IAAP,CAAY,gBAAWC,KAAvB;AACD,KAjBH;AAkBD,GA3BD;;AA6BAnB,SAAOE,EAAP,CAAU,wBAAckB,aAAxB,EAAuC,UAAChB,OAAD,EAAa;AAClD,QAAIiB,SAAS,uCAA2BrB,MAA3B,CAAb;AACA,oBACGsB,8BADH,CACkCD,MADlC,EAC0CjB,QAAQmB,KADlD,EACyDnB,QAAQG,QADjE,EAC2EH,QAAQoB,QADnF,EAC6FpB,QAAQqB,MADrG;;AAGA,QAAIF,QAAQ,oBAAwBG,0BAAxB,CAAmDL,MAAnD,CAAZ;;AAEA,uBACGC,8BADH,CACkCD,MADlC,EAC0CE,KAD1C,EACiDnB,QAAQG,QADzD,EACmEH,QAAQoB,QAD3E,EACqFpB,QAAQqB,MAD7F,EAEGhB,IAFH,CAEQ,YAAM;AACV,6BACGC,WADH,CACeT,kBADf,EAEGU,WAFH,CAEeX,MAFf,EAGGY,uBAHH,CAG2B,wBAAce,eAHzC,EAG0D,EAAEpB,UAAUH,QAAQG,QAApB,EAA8BkB,QAAQrB,QAAQqB,MAA9C,EAAsDG,UAAUxB,QAAQwB,QAAxE,EAH1D;;AAKA,6BACGC,2BADH,CAC+B,wBAAcC,gBAD7C,EAC+D,EAAEvB,UAAUH,QAAQG,QAApB,EAA8BwB,aAAa,IAA3C,EAD/D;AAED,KAVH;AAWD,GAlBD;AAmBD,C","file":"from-teams.js","sourcesContent":["import DatabaseCacheHandler from '../../data-stores/database';\nimport { getQuiznightCodeFromSocket } from '../../utils';\nimport MESSAGE_TYPES from '../../constants/message_types';\nimport QuizmasterMessageSender from '../quizmaster/to-quizmaster';\nimport Quiznight from '../../../models/Quiznight';\nimport ROOM_NAMES from '../../constants/rooms';\nimport ScoreboardMessageSender from '../scoreboard/to-scoreboard';\nimport TeamMessageSender from '../teams/to-teams';\nimport LocalDataStoreHandler from '../../data-stores/local';\nimport LocalDataStoreRetriever from '../../data-stores/local/retriever';\n\nexport default (socket, quiznightNamespace) => {\n  socket.on(MESSAGE_TYPES.CONNECT_TEAM, (message) => {\n    let quiznightCode = getQuiznightCodeFromSocket(socket);\n\n    LocalDataStoreHandler\n      .addTeamConnectionToCache(quiznightCode, message.teamName, socket);\n    \n    LocalDataStoreHandler\n      .saveNewTeamInQuiznightToCache(quiznightCode, message.teamName)\n\n    DatabaseCacheHandler\n      .saveNewTeamInQuiznightToCache(quiznightCode, message.teamName)\n      .then(() => {\n        QuizmasterMessageSender\n          .toNamespace(quiznightNamespace)\n          .usingSocket(socket)\n          .sendMessageToQuizmaster(MESSAGE_TYPES.TEAM_JOINED, {\n            teamName: message.teamName,\n            socketId: socket.id\n          });\n\n        TeamMessageSender\n          .toNamespace(quiznightNamespace)\n          .usingSocket(socket)\n          .sendMessageToSocketViaId(socket.id, MESSAGE_TYPES.PENDING, 'Welcome to the quiznight!, waiting for approval of quizmaster..');\n\n        socket.join(ROOM_NAMES.TEAMS);\n      });\n  });\n\n  socket.on(MESSAGE_TYPES.SUBMIT_ANSWER, (message) => {\n    let qnCode = getQuiznightCodeFromSocket(socket);\n    LocalDataStoreHandler\n      .saveAnswerOfTeamInRoundToCache(qnCode, message.round, message.teamName, message.question, message.answer);\n\n    let round = LocalDataStoreRetriever.getCurrentRoundInQuiznight(qnCode);\n\n    DatabaseCacheHandler\n      .saveAnswerOfTeamInRoundToCache(qnCode, round, message.teamName, message.question, message.answer)\n      .then(() => {\n        QuizmasterMessageSender\n          .toNamespace(quiznightNamespace)\n          .usingSocket(socket)\n          .sendMessageToQuizmaster(MESSAGE_TYPES.ANSWER_RECEIVED, { teamName: message.teamName, answer: message.answer, reSubmit: message.reSubmit });\n\n        ScoreboardMessageSender\n          .sendMessageToAllScoreboards(MESSAGE_TYPES.ANSWER_SUBMITTED, { teamName: message.teamName, hasAnswered: true });\n      });\n  });\n}"]}