{"version":3,"sources":["../../../../src/websockets/messaging/quizmaster/from-quizmaster.js"],"names":["socket","quiznightNamespace","on","CONNECT_QUIZMASTER","message","join","QUIZMASTER","toNamespace","usingSocket","sendMessage","PENDING","ACCEPT_TEAM","messageToTeam","accepted","team","isAccepted","sendMessageToSocketViaId","socketId","TEAM_ALLOWED","qnCode","removeTeamInQuiznightFromCache","teamName","then","disconnectSocket","START_ROUND","saveNewQuiznightRoundToCache","result","sendMessageToAllTeams","NEXT_QUESTION","NEW_QUESTION","question","_id","category","CLOSE_QUESTION","UPDATE_SCORE","givenAnswers","givenAnswer","getSocketIdFromTeam","isCorrect","incrementCorrectAnswersOfTeam","round","ANSWER_REVIEWED","correctAnswer","answer","END_ROUND","END_GAME"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAEe,UAACA,MAAD,EAASC,kBAAT,EAAgC;;AAE7CD,SAAOE,EAAP,CAAU,wBAAcC,kBAAxB,EAA4C,UAACC,OAAD,EAAa;AACvDJ,WAAOK,IAAP,CAAY,gBAAWC,UAAvB;;AAEA,2BACGC,WADH,CACeN,kBADf,EAEGO,WAFH,CAEeR,MAFf,EAGGS,WAHH,CAGe,wBAAcC,OAH7B,EAGsC,oEAHtC;AAID,GAPD;;AASAV,SAAOE,EAAP,CAAU,wBAAcS,WAAxB,EAAqC,UAACP,OAAD,EAAa;AAChD,QAAIQ,gBAAgB,EAAEC,UAAUT,QAAQU,IAAR,CAAaC,UAAzB,EAApB;;AAEA,sBACGR,WADH,CACeN,kBADf,EAEGO,WAFH,CAEeR,MAFf,EAGGgB,wBAHH,CAG4BZ,QAAQU,IAAR,CAAaG,QAHzC,EAGmD,wBAAcC,YAHjE,EAG+EN,aAH/E;;AAKA,QAAG,CAACA,cAAcG,UAAlB,EAA8B;AAC5B,UAAII,SAAS,uCAA2BnB,MAA3B,CAAb;AACA,yBACGoB,8BADH,CACkCD,MADlC,EAC0Cf,QAAQU,IAAR,CAAaO,QADvD,EAECC,IAFD,CAEM,kBAAkBC,gBAAlB,CAAmCnB,QAAQU,IAAR,CAAaG,QAAhD,CAFN;AAGD;AACF,GAdD;;AAgBAjB,SAAOE,EAAP,CAAU,wBAAcsB,WAAxB,EAAqC,UAACpB,OAAD,EAAa;AAChD,QAAIe,SAAS,uCAA2BnB,MAA3B,CAAb;AACA,uBACGyB,4BADH,CACgCN,MADhC,EAEGG,IAFH,CAEQ,UAACI,MAAD,EAAY;AAChB,wBACGnB,WADH,CACeN,kBADf,EAEGO,WAFH,CAEeR,MAFf,EAGG2B,qBAHH,CAGyB,wBAAcjB,OAHvC,EAGgD,+CAHhD;AAID,KAPH;AAQD,GAVD;;AAYAV,SAAOE,EAAP,CAAU,wBAAc0B,aAAxB,EAAuC,UAACxB,OAAD,EAAa;AAClD,sBACGG,WADH,CACeN,kBADf,EAEGO,WAFH,CAEeR,MAFf,EAGG2B,qBAHH,CAGyB,wBAAcE,YAHvC,EAGqD,EAAEC,UAAU1B,QAAQ0B,QAAR,CAAiBC,GAA7B,EAAkCC,UAAU5B,QAAQ0B,QAAR,CAAiBE,QAA7D,EAHrD;AAID,GALD;;AAOAhC,SAAOE,EAAP,CAAU,wBAAc+B,cAAxB,EAAwC,UAAC7B,OAAD,EAAa;AACnD,sBACGG,WADH,CACeN,kBADf,EAEGO,WAFH,CAEeR,MAFf,EAGG2B,qBAHH,CAGyB,wBAAcjB,OAHvC,EAGgD,4CAHhD;AAID,GALD;;AAOAV,SAAOE,EAAP,CAAU,wBAAcgC,YAAxB,EAAsC,UAAC9B,OAAD,EAAa;AACjD,QAAIe,SAAS,uCAA2BnB,MAA3B,CAAb;;AADiD;AAAA;AAAA;;AAAA;AAGjD,2BAAuBI,QAAQ+B,YAA/B,8HAA6C;AAAA,YAArCC,WAAqC;;AAC3C,YAAInB,WAAW,sBACZoB,mBADY,CACQlB,MADR,EACgBiB,YAAYf,QAD5B,CAAf;;AAGA,YAAGe,YAAYE,SAAf,EAA0B;AACxB,6BACGC,6BADH,CACiCpB,MADjC,EACyCf,QAAQoC,KADjD,EACwDJ,YAAYf,QADpE;AAED;AACD,0BACGd,WADH,CACeN,kBADf,EAEGe,wBAFH,CAE4BC,QAF5B,EAEsC,wBAAcwB,eAFpD,EAEqE,EAAEC,eAAetC,QAAQuC,MAAzB,EAAiCL,WAAWF,YAAYE,SAAxD,EAFrE;AAGD;AAdgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAelD,GAfD;;AAiBAtC,SAAOE,EAAP,CAAU,wBAAc0C,SAAxB,EAAmC,UAACxC,OAAD,EAAa;AAC9C;AACA;AACD,GAHD;;AAKAJ,SAAOE,EAAP,CAAU,wBAAc2C,QAAxB,EAAkC,UAACzC,OAAD,EAAa;AAC7C;AACA;AACD,GAHD;AAID,C","file":"from-quizmaster.js","sourcesContent":["import DatabaseCacheHandler from '../../caching/database';\nimport { getQuiznightCodeFromSocket } from '../../utils';\nimport MESSAGE_TYPES from '../../constants/message_types';\nimport QuizmasterMessageSender from '../quizmaster/to-quizmaster';\nimport Quiznight from '../../../models/Quiznight';\nimport ROOM_NAMES from '../../constants/rooms';\nimport TeamMessageSender from '../teams/to-teams';\nimport TeamWebsocketConnectionsCacheHandler from '../../caching/connections';\n\nexport default (socket, quiznightNamespace) => {\n\n  socket.on(MESSAGE_TYPES.CONNECT_QUIZMASTER, (message) => {\n    socket.join(ROOM_NAMES.QUIZMASTER);\n\n    QuizmasterMessageSender\n      .toNamespace(quiznightNamespace)\n      .usingSocket(socket)\n      .sendMessage(MESSAGE_TYPES.PENDING, 'Welcome to the quiznight quizmaster!, waiting for teams to apply..')\n  });\n\n  socket.on(MESSAGE_TYPES.ACCEPT_TEAM, (message) => {\n    let messageToTeam = { accepted: message.team.isAccepted };\n\n    TeamMessageSender\n      .toNamespace(quiznightNamespace)\n      .usingSocket(socket)\n      .sendMessageToSocketViaId(message.team.socketId, MESSAGE_TYPES.TEAM_ALLOWED, messageToTeam);\n\n    if(!messageToTeam.isAccepted) {\n      let qnCode = getQuiznightCodeFromSocket(socket);\n      DatabaseCacheHandler\n        .removeTeamInQuiznightFromCache(qnCode, message.team.teamName)\n      .then(TeamMessageSender.disconnectSocket(message.team.socketId));\n    }\n  });\n\n  socket.on(MESSAGE_TYPES.START_ROUND, (message) => {\n    let qnCode = getQuiznightCodeFromSocket(socket);\n    DatabaseCacheHandler\n      .saveNewQuiznightRoundToCache(qnCode)\n      .then((result) => {\n        TeamMessageSender\n          .toNamespace(quiznightNamespace)\n          .usingSocket(socket)\n          .sendMessageToAllTeams(MESSAGE_TYPES.PENDING, 'Round has started, waiting for next question.')\n      });\n  });\n\n  socket.on(MESSAGE_TYPES.NEXT_QUESTION, (message) => {\n    TeamMessageSender\n      .toNamespace(quiznightNamespace)\n      .usingSocket(socket)\n      .sendMessageToAllTeams(MESSAGE_TYPES.NEW_QUESTION, { question: message.question._id, category: message.question.category });\n  });\n\n  socket.on(MESSAGE_TYPES.CLOSE_QUESTION, (message) => {\n    TeamMessageSender\n      .toNamespace(quiznightNamespace)\n      .usingSocket(socket)\n      .sendMessageToAllTeams(MESSAGE_TYPES.PENDING, 'Quizmaster is currently reviewing answers.');\n  });\n\n  socket.on(MESSAGE_TYPES.UPDATE_SCORE, (message) => {\n    let qnCode = getQuiznightCodeFromSocket(socket);\n\n    for(let givenAnswer of message.givenAnswers) {\n      let socketId = TeamWebsocketConnectionsCacheHandler\n        .getSocketIdFromTeam(qnCode, givenAnswer.teamName);\n\n      if(givenAnswer.isCorrect) {\n        DatabaseCacheHandler\n          .incrementCorrectAnswersOfTeam(qnCode, message.round, givenAnswer.teamName);\n      }\n      TeamMessageSender\n        .toNamespace(quiznightNamespace)\n        .sendMessageToSocketViaId(socketId, MESSAGE_TYPES.ANSWER_REVIEWED, { correctAnswer: message.answer, isCorrect: givenAnswer.isCorrect });\n    }\n  });\n\n  socket.on(MESSAGE_TYPES.END_ROUND, (message) => {\n    // Loop door lijst met teams\n    // 1. update roundpoints in database\n  });\n\n  socket.on(MESSAGE_TYPES.END_GAME, (message) => {\n    // Loop door lijst met teams\n    // 1. haal quiznight uit database\n  });\n}"]}