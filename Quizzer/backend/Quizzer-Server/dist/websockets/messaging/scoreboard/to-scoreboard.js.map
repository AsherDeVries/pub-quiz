{"version":3,"sources":["../../../../src/websockets/messaging/scoreboard/to-scoreboard.js"],"names":["ScoreboardMessageSender","toNamespace","namespace","usingSocket","socket","sendMessage","messageType","message","emit","sendMessageToAllScoreboards","to","SCOREBOARD","sendNewQuestionMessage","quiznightCode","question","category","answersPerTeam","getGivenAnswersOfQuestionPerTeam","answerOfTeam","hasAnswered","NEW_QUESTION","teams","sendShowQuestionResultsMessage","SHOW_QUESTION_RESULTS","sendShowScoresMessage","getQuiznightByCode","quizRound","getCurrentRoundInQuiznight","team","teamStats","getTeamStatisticsOfTeamInCurrentRound","_id","score","round","questionsCorrect","correctAnswersAmount"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,0BAA0B;AAC9BC,aAD8B,uBAClBC,SADkB,EACP;AACrB,SAAKA,SAAL,GAAiBA,SAAjB;AACA,WAAO,IAAP;AACD,GAJ6B;AAK9BC,aAL8B,uBAKlBC,MALkB,EAKV;AAClB,SAAKA,MAAL,GAAcA,MAAd;AACA,WAAO,IAAP;AACD,GAR6B;AAS9BC,aAT8B,uBASlBC,WATkB,EASLC,OATK,EASI;AAChC,SAAKH,MAAL,CAAYI,IAAZ,CAAiBF,WAAjB,EAA8BC,OAA9B;AACD,GAX6B;AAY9BE,6BAZ8B,uCAYFH,WAZE,EAYWC,OAZX,EAYoB;AAChD,SAAKL,SAAL,CAAeQ,EAAf,CAAkB,gBAAWC,UAA7B,EAAyCH,IAAzC,CAA8CF,WAA9C,EAA2DC,OAA3D;AACD,GAd6B;AAe9BK,wBAf8B,kCAePC,aAfO,EAeQC,QAfR,EAekBC,QAflB,EAe4B;AACxD,QAAIC,8BAAqB,oBAAwBC,gCAAxB,CAAyDJ,aAAzD,EAAwEC,QAAxE,CAArB,CAAJ;AADwD;AAAA;AAAA;;AAAA;AAExD,2BAAwBE,cAAxB,8HAAwC;AAAA,YAAhCE,YAAgC;;AACtCA,qBAAaC,WAAb,GAA2B,KAA3B;AACD;AAJuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMxD,SAAKV,2BAAL,CAAiC,wBAAcW,YAA/C,EAA6D;AAC3DN,gBAAU,EAAEA,UAAUA,QAAZ,EAAsBC,UAAUA,QAAhC,EADiD;AAE3DM,aAAOL;AAFoD,KAA7D;AAID,GAzB6B;AA0B9BM,gCA1B8B,0CA0BCT,aA1BD,EA0BgBC,QA1BhB,EA0B0BC,QA1B1B,EA0BoC;AAChE,SAAKN,2BAAL,CAAiC,wBAAcc,qBAA/C,EAAsE;AACpET,gBAAU,EAAEA,UAAUA,QAAZ,EAAsBC,UAAUA,QAAhC,EAD0D;AAEpEM,aAAO,oBAAwBJ,gCAAxB,CAAyDJ,aAAzD,EAAwEC,QAAxE;AAF6D,KAAtE;AAID,GA/B6B;AAgC9BU,uBAhC8B,iCAgCRX,aAhCQ,EAgCO;AACnC,QAAIQ,qBAAY,oBAAwBI,kBAAxB,CAA2CZ,aAA3C,EAA0DQ,KAAtE,CAAJ;AACA,QAAIK,YAAY,oBAAwBC,0BAAxB,CAAmDd,aAAnD,CAAhB;;AAFmC;AAAA;AAAA;;AAAA;AAInC,4BAAgBQ,KAAhB,mIAAuB;AAAA,YAAfO,IAAe;;AACrB,YAAIC,YAAY,oBAAwBC,qCAAxB,CAA8DjB,aAA9D,EAA6Ee,KAAKG,GAAlF,CAAhB;AACAH,aAAKI,KAAL,GAAa;AACXC,iBAAOP,UAAUK,GADN;AAEXG,4BAAkBL,UAAUM;AAFjB,SAAb;AAID;AAVkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYnC,SAAK1B,2BAAL,CAAiC,wBAAcc,qBAA/C,EAAsE;AACpET,gBAAU,EAAEA,UAAUA,QAAZ,EAAsBC,UAAUA,QAAhC,EAD0D;AAEpEM,aAAOA;AAF6D,KAAtE;AAID;AAhD6B,CAAhC;;kBAmDerB,uB","file":"to-scoreboard.js","sourcesContent":["import MESSAGE_TYPES from '../../constants/message_types';\nimport ROOM_NAMES from '../../constants/rooms';\nimport LocalDataStoreRetriever from '../../data-stores/local/retriever';\n\nconst ScoreboardMessageSender = {\n  toNamespace(namespace) {\n    this.namespace = namespace;\n    return this;\n  },\n  usingSocket(socket) {\n    this.socket = socket;\n    return this;\n  },\n  sendMessage(messageType, message) {\n    this.socket.emit(messageType, message);\n  },\n  sendMessageToAllScoreboards(messageType, message) {\n    this.namespace.to(ROOM_NAMES.SCOREBOARD).emit(messageType, message);\n  },\n  sendNewQuestionMessage(quiznightCode, question, category) {\n    let answersPerTeam = {...LocalDataStoreRetriever.getGivenAnswersOfQuestionPerTeam(quiznightCode, question)};\n    for(let answerOfTeam of answersPerTeam) {\n      answerOfTeam.hasAnswered = false;\n    }\n\n    this.sendMessageToAllScoreboards(MESSAGE_TYPES.NEW_QUESTION, {\n      question: { question: question, category: category },\n      teams: answersPerTeam\n    });\n  },\n  sendShowQuestionResultsMessage(quiznightCode, question, category) {\n    this.sendMessageToAllScoreboards(MESSAGE_TYPES.SHOW_QUESTION_RESULTS, {\n      question: { question: question, category: category },\n      teams: LocalDataStoreRetriever.getGivenAnswersOfQuestionPerTeam(quiznightCode, question)\n    });\n  },\n  sendShowScoresMessage(quiznightCode) {\n    let teams = {...LocalDataStoreRetriever.getQuiznightByCode(quiznightCode).teams};\n    let quizRound = LocalDataStoreRetriever.getCurrentRoundInQuiznight(quiznightCode);\n\n    for(let team of teams) {\n      let teamStats = LocalDataStoreRetriever.getTeamStatisticsOfTeamInCurrentRound(quiznightCode, team._id);\n      team.score = {\n        round: quizRound._id,\n        questionsCorrect: teamStats.correctAnswersAmount\n      }\n    }\n\n    this.sendMessageToAllScoreboards(MESSAGE_TYPES.SHOW_QUESTION_RESULTS, {\n      question: { question: question, category: category },\n      teams: teams\n    });\n  }\n};\n\nexport default ScoreboardMessageSender;"]}