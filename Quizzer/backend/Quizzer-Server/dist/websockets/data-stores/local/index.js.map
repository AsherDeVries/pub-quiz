{"version":3,"sources":["../../../../src/websockets/data-stores/local/index.js"],"names":["LocalDataStoreHandler","addQuiznightToCache","quiznightCode","data","quizNights","push","state","teams","rounds","connections","console","log","JSON","stringify","addTeamConnectionToCache","teamName","socket","quiznight","getQuiznightByCode","socketId","id","saveNewQuiznightRoundToCache","newRoundNumber","length","newTeamStatistics","team","_id","givenAnswers","correctAnswersAmount","teamStatistics","removeTeamInQuiznightFromCache","getTeamOfQuiznightByName","index","indexOf","teamConnections","i","splice","saveNewTeamInQuiznightToCache","roundPoints","getSocketIdFromTeam","find","object","incrementCorrectAnswersOfTeam","round","getTeamStatisticsOfTeamInCurrentRound","saveAnswerOfTeamInRoundToCache","question","answer","teamHasGivenAnswerForQuestion","givenAnswer","getGivenAnswerToQuestion","value","updateRoundPointsOfAllTeams","quiznightRound","getCurrentRoundInQuiznight","topListTeams","sort","a","b","removeQuiznightByCode","quiznights","getAllQuiznights"],"mappings":"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","file":"index.js","sourcesContent":["import LocalDataStoreRetriever from './retriever';\nimport LocalDataStore from './store';\n\nconst LocalDataStoreHandler = {\n  addQuiznightToCache(quiznightCode) {\n    LocalDataStore.data.quizNights.push({\n      quiznightCode: quiznightCode,\n      state: {\n        teams: [],\n        rounds: []\n      },\n      connections: {\n        teams: []\n      }\n    });\n    console.log('-- IN addQuiznightToCache --');\n    console.log(JSON.stringify(LocalDataStore.data.quizNights));\n  },\n  addTeamConnectionToCache(quiznightCode, teamName, socket) {\n    let quiznight = LocalDataStoreRetriever.getQuiznightByCode(quiznightCode);\n    quiznight.connections.teams.push({\n      teamName: teamName,\n      socketId: socket.id\n    });\n    console.log('-- IN addTeamToCache --');\n    console.log(JSON.stringify(LocalDataStore.data.quizNights));\n  },\n  saveNewQuiznightRoundToCache(quiznightCode) {\n    let quiznight = LocalDataStoreRetriever.getQuiznightByCode(quiznightCode);\n    let newRoundNumber = quiznight.state.rounds.length+1;\n\n    let newTeamStatistics = [];\n    for(let team of quiznight.state.teams) {\n      newTeamStatistics.push({\n        team: team._id,\n        givenAnswers: [],\n        correctAnswersAmount: 0\n      })\n    }\n\n    quiznight.state.rounds.push({\n      _id: newRoundNumber,\n      teamStatistics: newTeamStatistics\n    });\n    console.log('-- IN saveNewQuiznightRoundToCache --');\n    console.log(JSON.stringify(LocalDataStore.data.quizNights));\n  },\n  removeTeamInQuiznightFromCache(quiznightCode, teamName) {\n    let quiznight = LocalDataStoreRetriever.getQuiznightByCode(quiznightCode);\n    let team = LocalDataStoreRetriever.getTeamOfQuiznightByName(quiznightCode, teamName);\n\n    var index = quiznight.state.teams.indexOf(team);\n    let teamConnections = quiznight.connections.teams;\n    // remove connection\n    for(let i = 0; i < teamConnections.length; i++) {\n      if(teamConnections[i].teamName == teamName) {\n        teamConnections.splice(i, 1);\n      }\n    }\n    // remove team data\n    quiznight.state.teams.splice(index, 1);\n    console.log('-- IN removeTeamInQuiznightFromCache --');\n    console.log(JSON.stringify(LocalDataStore.data.quizNights));\n  },\n  saveNewTeamInQuiznightToCache(quiznightCode, teamName) {\n    let quiznight = LocalDataStoreRetriever.getQuiznightByCode(quiznightCode);\n    quiznight.state.teams.push({\n      _id: teamName,\n      roundPoints: 0\n    });\n    console.log('-- IN saveNewTeamInQuiznightToCache --');\n    console.log(JSON.stringify(LocalDataStore.data.quizNights));\n  },\n  getSocketIdFromTeam(quiznightCode, teamName) {\n    let quiznight = LocalDataStoreRetriever.getQuiznightByCode(quiznightCode);\n    let team = quiznight.connections.teams.find((object) => {\n      return object.teamName == teamName;\n    });\n    console.log('-- IN getSocketIdFromTeam --');\n    console.log(JSON.stringify(LocalDataStore.data.quizNights));\n    return team.socketId;\n  },\n  incrementCorrectAnswersOfTeam(quiznightCode, round, teamName) {\n    let teamStatistics = LocalDataStoreRetriever.getTeamStatisticsOfTeamInCurrentRound(quiznightCode, teamName);\n    teamStatistics.correctAnswersAmount++;\n    console.log('-- IN incrementCorrectAnswersOfTeam --');\n    console.log(JSON.stringify(LocalDataStore.data.quizNights));\n  },\n  saveAnswerOfTeamInRoundToCache(quiznightCode, round, teamName, question, answer) {\n    let teamStatistics = LocalDataStoreRetriever.getTeamStatisticsOfTeamInCurrentRound(quiznightCode, teamName);\n    if(this.teamHasGivenAnswerForQuestion(teamStatistics, question)) {\n      let givenAnswer = LocalDataStoreRetriever.getGivenAnswerToQuestion(teamStatistics, question);\n      givenAnswer.value = answer;\n    } else {\n      teamStatistics.givenAnswers.push({\n        question: question,\n        value: answer\n      });\n    }\n    console.log('-- IN saveAnswerOfTeamInRoundToCache --');\n    console.log(JSON.stringify(LocalDataStore.data.quizNights));\n  },\n  teamHasGivenAnswerForQuestion(teamStatistics, question) {\n    return LocalDataStoreRetriever.getGivenAnswerToQuestion(teamStatistics, question) != null;\n  },\n  updateRoundPointsOfAllTeams(quiznightCode) {\n    let quiznightRound = LocalDataStoreRetriever.getCurrentRoundInQuiznight(quiznightCode);\n    let topListTeams = quiznightRound.teamStatistics.sort((a, b) => {\n      return b.correctAnswersAmount - a.correctAnswersAmount;\n    })\n\n    console.log(topListTeams);\n    for(let i = 0; i < topListTeams.length; i++) {\n      let team = LocalDataStoreRetriever.getTeamOfQuiznightByName(quiznightCode, topListTeams[i].team);\n      console.log(team);\n      if(i == 0) {\n        team.roundPoints = 4;\n      }\n      else if(i == 1) {\n        team.roundPoints = 2;\n      }\n      else if(i == 2) {\n        team.roundPoints = 1;\n      } else {\n        team.roundPoints = 0.1;\n      }\n    }\n    console.log('-- IN updateRoundPointsOfAllTeams --');\n    console.log(JSON.stringify(LocalDataStore.data.quizNights));\n  },\n  removeQuiznightByCode(quiznightCode) {\n    let quiznights = LocalDataStoreRetriever.getAllQuiznights(quiznightCode);\n    for(let i = 0; i < quiznights.length; i++) {\n      if(quiznights[i].quiznight == quiznightCode) {\n        quiznights.splice(i, 1);\n      }\n    }\n  }\n};\n\nexport default LocalDataStoreHandler;"]}