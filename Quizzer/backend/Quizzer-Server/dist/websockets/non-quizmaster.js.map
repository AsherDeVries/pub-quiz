{"version":3,"sources":["../../src/websockets/non-quizmaster.js"],"names":["quiznightCode","quiznightNamespace","webSocketServer","of","on","socket","emit","PENDING","nsp","name","message","join","to","CONNECT_TEAM","update","_id","substr","$push","teams","teamName","roundPoints","then","id","find","rounds","result","length","teamStatistics","chosenQuestions","promises","push","team","givenAnswers","correctAnswersAmount","Promise","all","question","answer","$elemMatch","round","$set","socketId","selector","socket_id"],"mappings":"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","file":"non-quizmaster.js","sourcesContent":["import app from '../app';\nimport Quiznight from '../models/Quiznight';\nimport MESSAGE_TYPES from './constants/message_types';\nimport { isQuizmaster } from './server';\n\nexport default (quiznightCode) => {\n  let quiznightNamespace = app.webSocketServer.of('/' + quiznightCode);\n\n  quiznightNamespace.on('connection', (socket) => {\n    socket.emit(MESSAGE_TYPES.PENDING, `Welcome to the quiznight with code: ${socket.nsp.name}! Send your teamname to join.`);\n    // TODO: refactor code below to redirect quizmaster to created namespace\n    \n    socket.on('CONNECT_QUIZMASTER', (message) => {\n      socket.join('QUIZMASTER_ROOM');\n      quiznightNamespace.to('QUIZMASTER_ROOM').emit('PENDING', `Welcome to the quiznight quizmaster!, waiting for teams to apply..`);\n    });\n    socket.emit('PENDING', `Welcome to the quiznight! Send your teamname to join.`);\n    \n    socket.on('CONNECT_SCOREBOARD', (message) => {\n      socket.join('SCOREBOARD_ROOM');\n    });\n\n    socket.on(MESSAGE_TYPES.CONNECT_TEAM, (message) => {\n      Quiznight.update(\n        { _id: socket.nsp.name.substr(1) },\n        { $push: { teams: { _id: message.teamName, roundPoints: 0 } } })\n        .then(() => {\n          quiznightNamespace.to('QUIZMASTER_ROOM').emit('TEAM_JOINED', {\n            'teamName': message.teamName,\n            'socketId': socket.id\n          });\n          socket.join('TEAMS_ROOM');\n        });\n    });\n\n    socket.on('START_ROUND', (message) => {\n      Quiznight\n        .find({ _id: socket.nsp.name.substr(1) }, { rounds: 1 })\n        .then((result) => {\n          return Quiznight\n            .update(\n              { _id: socket.nsp.name.substr(1) },\n              { $push: { rounds: { _id: result.rounds.length+1, teamStatistics: [], chosenQuestions: [] } } })\n        })\n        .then(() => {\n          return Quiznight\n            .find({ _id: socket.nsp.name.substr(1) }, { teams: 1 })\n        })\n        .then((result) => {\n          return result.teams;\n        })\n        .then((teams) => {\n          let promises = [];\n          for(let teamName of teams) {\n            promises.push(\n              Quiznight\n                .update(\n                  { _id: socket.nsp.name },\n                  { $push: { \"rounds.teamStatistics\": { team: teamName, givenAnswers: [], correctAnswersAmount: 0 } } })\n            );\n          }\n          return Promise.all(promises);\n        })\n        .then(() => {\n          quiznightNamespace.to('TEAMS_ROOM').emit('PENDING', 'Round has started, waiting for next question.')\n        });\n    });\n\n    socket.on('NEXT_QUESTION', (message) => {\n      quiznightNamespace.to('TEAMS_ROOM').emit('NEW_QUESTION', { question: message.question })\n    });\n\n    socket.on('CLOSE_QUESTION', (message) => {\n      quiznightNamespace.to('TEAMS_ROOM').emit('QUESTION_CLOSED', { question: message.question, answer: message.answer })\n      // WANNEER MOET SCOREBOARD GEINFORMEERD WORDEN OVER ANTWOORDEN VAN TEAMS??\n    });\n\n    socket.on('SUBMIT_ANSWER', (message) => {\n      Quiznight.update(\n        { _id: message.teamName, rounds: { $elemMatch: { _id: message.round } },  \"rounds.teamStatistics\" : { $elemMatch: { team: message.teamName } } },\n        { $set: { \"rounds.0.teamStatistics.0.givenAnswers.$.value\": message.answer } })\n        .then(() => {\n          quiznightNamespace.to('QUIZMASTER_ROOM')\n            .emit('ANSWER_SUBMITTED', { question: message.question, answer: message.answer, socketId: socket.id })\n          quiznightNamespace.to('SCOREBOARD_ROOM')\n            .emit('ANSWER_SUBMITTED', { team: message.team })\n          // Informeer scoreboard over submitted answer.\n        });\n    });\n\n    socket.on('RE_SUBMIT_ANSWER', (message) => {\n      let selector = \"rounds.0.teamStatistics.0.givenAnswers.\" + message.round + \".value\";\n      Quiznight.update(\n        { _id: message.teamName, rounds: { $elemMatch: { _id: message.round } },  \"rounds.teamStatistics\" : { $elemMatch: { team: message.teamName } } },\n        { $set: { selector: message.answer } })\n        .then(() => {\n          quiznightNamespace.to('QUIZMASTER_ROOM')\n            .emit('ANSWER_SUBMITTED', { question: message.question, answer: message.answer, socketId: socket.id })\n        });\n    });\n\n    socket.on('UPDATE_SCORE', (message) => {\n      // Loop door lijst met teams\n      // 1. Informeer over antwoord review\n      // 2. Zet aantal goede antwoorden per team in db.\n      // 3. Zet question op gereviewed in db\n      quiznightNamespace.to(message.socket_id).emit('ANSWER_REVIEWED', { question: message.question, answer: message.answer })\n      quiznightNamespace.to('QUIZMASTER_ROOM').emit('ANSWER_REVIEWED', { question: message.question, answer: message.answer })\n    });\n\n    socket.on('END_ROUND', (message) => {\n      // Loop door lijst met teams\n      // 1. update roundpoints in database\n    });\n  });\n\n  return quiznightNamespace;\n}"]}