{"version":3,"sources":["../../../../src/websockets/messaging/scoreboard/to-scoreboard.js"],"names":["ScoreboardMessageSender","toNamespace","namespace","usingSocket","socket","sendMessage","messageType","message","emit","sendMessageToAllScoreboards","to","SCOREBOARD","sendNewQuestionMessage","quiznightCode","question","category","quiznightRound","getCurrentRoundInQuiznight","teamsDataToSend","teamStatistics","teamStat","givenAnswerOfTeam","getGivenAnswerToQuestion","push","teamName","team","givenAnswer","answersPerTeam","answerOfTeam","hasAnswered","NEW_QUESTION","teams","sendShowQuestionResultsMessage","SHOW_QUESTION_RESULTS","getGivenAnswersOfQuestionPerTeam","sendShowScoresMessage","data","getQuiznightByCode","qn","state","quizRound","teamStats","getTeamStatisticsOfTeamInCurrentRound","_id","score","round","questionsCorrect","correctAnswersAmount","console","log","SHOW_SCORES"],"mappings":"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","file":"to-scoreboard.js","sourcesContent":["import MESSAGE_TYPES from '../../constants/message_types';\nimport ROOM_NAMES from '../../constants/rooms';\nimport LocalDataStoreRetriever from '../../data-stores/local/retriever';\n\nconst ScoreboardMessageSender = {\n  toNamespace(namespace) {\n    this.namespace = namespace;\n    return this;\n  },\n  usingSocket(socket) {\n    this.socket = socket;\n    return this;\n  },\n  sendMessage(messageType, message) {\n    this.socket.emit(messageType, message);\n  },\n  sendMessageToAllScoreboards(messageType, message) {\n    this.namespace.to(ROOM_NAMES.SCOREBOARD).emit(messageType, message);\n  },\n  sendNewQuestionMessage(quiznightCode, question, category) {\n    let quiznightRound = {...LocalDataStoreRetriever.getCurrentRoundInQuiznight(quiznightCode)};\n    let teamsDataToSend = [];\n    for(let teamStat of quiznightRound.teamStatistics) {\n      let givenAnswerOfTeam = LocalDataStoreRetriever.getGivenAnswerToQuestion(teamStat, question);\n\n      teamsDataToSend.push({\n        teamName: teamStat.team,\n        givenAnswer: givenAnswerOfTeam\n      });\n    }\n\n    let answersPerTeam = teamsDataToSend;\n    for(let answerOfTeam of answersPerTeam) {\n      answerOfTeam.hasAnswered = false;\n    }\n    this.sendMessageToAllScoreboards(MESSAGE_TYPES.NEW_QUESTION, {\n      question: { question: question, category: category },\n      teams: answersPerTeam\n    });\n  },\n  sendShowQuestionResultsMessage(quiznightCode, question, category) {\n    this.sendMessageToAllScoreboards(MESSAGE_TYPES.SHOW_QUESTION_RESULTS, {\n      question: { question: question, category: category },\n      teams: LocalDataStoreRetriever.getGivenAnswersOfQuestionPerTeam(quiznightCode, question)\n    });\n  },\n  sendShowScoresMessage(quiznightCode) {\n    let data = LocalDataStoreRetriever.getQuiznightByCode(quiznightCode);\n\n    let qn = {...data};\n    let teams = qn.state.teams;\n    let quizRound = LocalDataStoreRetriever.getCurrentRoundInQuiznight(quiznightCode);\n\n    for(let team of teams) {\n      let teamStats = LocalDataStoreRetriever.getTeamStatisticsOfTeamInCurrentRound(quiznightCode, team._id);\n      team.score = {\n        round: quizRound._id,\n        questionsCorrect: teamStats.correctAnswersAmount\n      }\n    }\n\n    console.log(\"SHOW SCORES\");\n    console.log(teams);\n    this.sendMessageToAllScoreboards(MESSAGE_TYPES.SHOW_SCORES, {\n      teams: teams\n    });\n  }\n};\n\nexport default ScoreboardMessageSender;"]}