{"version":3,"sources":["../../src/routes/questionRoutes.js"],"names":["question","get","middlewareForQueryPresent","req","res","find","then","send","data","catch","Error","next","query","category","random","limitrecords","limit","parseInt","count","err","skipRecords","getRandom","skip","min","max","Math","ceil"],"mappings":";;;;;;AAAA;;AACA;;AAEA;;;;AACA;;;;;;kBAEe,YAAM;AACnB,MAAIA,WAAW,sBAAf;;AAEAA,WAASC,GAAT,CAAa,GAAb,EAAkBC,yBAAlB,EAA6C,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzD,uBAAcC,IAAd,CAAmB,EAAnB,EAAuBC,IAAvB,CAA4B,gBAAQ;AAClC,aAAOF,IAAIG,IAAJ,CAASC,IAAT,CAAP;AACD,KAFD,EAEGC,KAFH,CAES,eAAO;AACd,YAAM,IAAIC,KAAJ,CAAU,oCAAV,CAAN;AACD,KAJD;AAKD,GAND;;AAQA,SAAOV,QAAP;AACD,C;;AAED,IAAME,4BAA4B,SAA5BA,yBAA4B,CAAUC,GAAV,EAAeC,GAAf,EAAoBO,IAApB,EAA0B;AAC1D,MAAIR,IAAIS,KAAJ,CAAUC,QAAd,EAAwB;AACtB,QAAIV,IAAIS,KAAJ,CAAUE,MAAd,EAAsB;AACpB,UAAIC,eAAgBZ,IAAIS,KAAJ,CAAUI,KAAX,GAAoBC,SAASd,IAAIS,KAAJ,CAAUI,KAAnB,CAApB,GAAgD,EAAnE;AACA,yBAAcE,KAAd,CAAoB,EAAE,YAAYf,IAAIS,KAAJ,CAAUC,QAAxB,EAApB,EAAwD,UAAUM,GAAV,EAAeD,KAAf,EAAsB;AAC5E,YAAIE,cAAcC,UAAU,CAAV,EAAaH,QAAQH,YAArB,CAAlB;AACA,2BAAcV,IAAd,CAAmB,EAAE,YAAYF,IAAIS,KAAJ,CAAUC,QAAxB,EAAnB,EAAuDS,IAAvD,CAA4DF,WAA5D,EAAyEJ,KAAzE,CAA+ED,YAA/E,EACCT,IADD,CACM,gBAAQ;AACZ,iBAAOF,IAAIG,IAAJ,CAASC,IAAT,CAAP;AACD,SAHD;AAID,OAND;AAOD,KATD,MAUK;AACH,yBAAcH,IAAd,CAAmB,EAAE,YAAYF,IAAIS,KAAJ,CAAUC,QAAxB,EAAnB,EAAuDP,IAAvD,CAA4D,gBAAQ;AAClE,eAAOF,IAAIG,IAAJ,CAASC,IAAT,CAAP;AACD,OAFD,EAEGC,KAFH,CAES,eAAO;AACd,cAAM,IAAIC,KAAJ,CAAU,oCAAV,CAAN;AACD,OAJD;AAKD;AACF,GAlBD,MAmBK;AACH,WAAOC,MAAP;AACD;AACF,CAvBD;;AAyBA,IAAMU,YAAY,SAAZA,SAAY,CAACE,GAAD,EAAMC,GAAN,EAAc;AAC9B,SAAOC,KAAKC,IAAL,CAAUD,KAAKX,MAAL,MAAiBU,MAAMD,GAAvB,IAA8BA,GAAxC,CAAP;AACD,CAFD","file":"questionRoutes.js","sourcesContent":["import { version } from '../../package.json';\nimport { Router } from 'express';\n\nimport QuestionModel from '../models/Question';\nimport Quiznight from '../models/Quiznight';\n\nexport default () => {\n  let question = Router();\n\n  question.get('/', middlewareForQueryPresent, (req, res) => {\n    QuestionModel.find({}).then(data => {\n      return res.send(data);\n    }).catch(err => {\n      throw new Error('Can not retrieve questions from db');\n    });\n  });\n\n  return question;\n}\n\nconst middlewareForQueryPresent = function (req, res, next) {\n  if (req.query.category) {\n    if (req.query.random) {\n      let limitrecords = (req.query.limit) ? parseInt(req.query.limit) : 50 \n      QuestionModel.count({ 'category': req.query.category }, function (err, count) {\n        var skipRecords = getRandom(1, count - limitrecords);\n        QuestionModel.find({ 'category': req.query.category }).skip(skipRecords).limit(limitrecords)\n        .then(data => {\n          return res.send(data);\n        });\n      });\n    }\n    else {\n      QuestionModel.find({ 'category': req.query.category }).then(data => {\n        return res.send(data);\n      }).catch(err => {\n        throw new Error('Can not retrieve questions from db');\n      });\n    }\n  }\n  else {\n    return next();\n  }\n}\n\nconst getRandom = (min, max) => {\n  return Math.ceil(Math.random() * (max - min) + min);\n}"]}