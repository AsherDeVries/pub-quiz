{"version":3,"sources":["../../../../src/websockets/data-stores/local/retriever.js"],"names":["LocalDataStoreRetriever","getGivenAnswerToQuestion","teamStatistics","question","givenAnswers","find","givenAnswer","getGivenAnswersOfQuestionPerTeam","quiznightCode","quiznightRound","getCurrentRoundInQuiznight","teamsDataToSend","teamStat","givenAnswerOfTeam","push","teamName","team","getTeamStatisticsOfTeamInCurrentRound","quiznight","getQuiznightByCode","currentRoundState","teamStats","amountOfRounds","state","rounds","length","getTeamOfQuiznightByName","teams","_id","getAllQuiznights","data","quizNights","getTeamsOfQuiznight"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,0BAA0B;AAC9BC,0BAD8B,oCACLC,cADK,EACWC,QADX,EACqB;AACjD,WAAOD,eAAeE,YAAf,CAA4BC,IAA5B,CAAiC,UAACC,WAAD,EAAiB;AACvD,aAAOA,YAAYH,QAAZ,IAAwBA,QAA/B;AACD,KAFM,CAAP;AAGD,GAL6B;AAM9BI,kCAN8B,4CAMGC,aANH,EAMkBL,QANlB,EAM4B;AACxD,QAAIM,iBAAiBT,wBAAwBU,0BAAxB,CAAmDF,aAAnD,CAArB;AACA,QAAIG,kBAAkB,EAAtB;AAFwD;AAAA;AAAA;;AAAA;AAGxD,2BAAoBF,eAAeP,cAAnC,8HAAmD;AAAA,YAA3CU,QAA2C;;AACjD,YAAIC,oBAAoB,KAAKZ,wBAAL,CAA8BW,QAA9B,EAAwCT,QAAxC,CAAxB;;AAEAQ,wBAAgBG,IAAhB,CAAqB;AACnBC,oBAAUH,SAASI,IADA;AAEnBV,uBAAaO;AAFM,SAArB;AAID;AAVuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWxD,WAAOF,eAAP;AACD,GAlB6B;AAmB9BM,uCAnB8B,iDAmBQT,aAnBR,EAmBuBO,QAnBvB,EAmBiC;AAC7D,QAAIG,YAAY,KAAKC,kBAAL,CAAwBX,aAAxB,CAAhB;AACA,QAAIY,oBAAoB,KAAKV,0BAAL,CAAgCF,aAAhC,CAAxB;AACA,WAAOY,kBAAkBlB,cAAlB,CAAiCG,IAAjC,CAAsC,UAACgB,SAAD,EAAe;AAC1D,aAAOA,UAAUL,IAAV,IAAkBD,QAAzB;AACD,KAFM,CAAP;AAGD,GAzB6B;AA0B9BL,4BA1B8B,sCA0BHF,aA1BG,EA0BY;AACxC,QAAIU,YAAY,KAAKC,kBAAL,CAAwBX,aAAxB,CAAhB;AACA,QAAIc,iBAAiBJ,UAAUK,KAAV,CAAgBC,MAAhB,CAAuBC,MAA5C;AACA,WAAOP,UAAUK,KAAV,CAAgBC,MAAhB,CAAuBF,iBAAe,CAAtC,CAAP;AACD,GA9B6B;AA+B9BI,0BA/B8B,oCA+BLlB,aA/BK,EA+BUO,QA/BV,EA+BoB;AAChD,QAAIG,YAAY,KAAKC,kBAAL,CAAwBX,aAAxB,CAAhB;;AAEA,WAAOU,UAAUK,KAAV,CAAgBI,KAAhB,CAAsBtB,IAAtB,CAA2B,UAACW,IAAD,EAAU;AAC1C,aAAOA,KAAKY,GAAL,IAAYb,QAAnB;AACD,KAFM,CAAP;AAGD,GArC6B;AAsC9Bc,kBAtC8B,8BAsCX;AACjB,WAAO,gBAAeC,IAAf,CAAoBC,UAA3B;AACD,GAxC6B;AAyC9BZ,oBAzC8B,8BAyCXX,aAzCW,EAyCI;AAChC,WAAO,gBAAesB,IAAf,CAAoBC,UAApB,CAA+B1B,IAA/B,CAAoC,UAACa,SAAD,EAAe;AACxD,aAAOA,UAAUV,aAAV,IAA2BA,aAAlC;AACD,KAFM,CAAP;AAGD,GA7C6B;AA8C9BwB,qBA9C8B,+BA8CVxB,aA9CU,EA8CK;AACjC,QAAIU,YAAY,KAAKC,kBAAL,CAAwBX,aAAxB,CAAhB;AACA,WAAOU,UAAUK,KAAV,CAAgBI,KAAvB;AACD;AAjD6B,CAAhC;;kBAoDe3B,uB","file":"retriever.js","sourcesContent":["import LocalDataStore from './store';\n\nconst LocalDataStoreRetriever = {\n  getGivenAnswerToQuestion(teamStatistics, question) {\n    return teamStatistics.givenAnswers.find((givenAnswer) => {\n      return givenAnswer.question == question;\n    });\n  },\n  getGivenAnswersOfQuestionPerTeam(quiznightCode, question) {\n    let quiznightRound = LocalDataStoreRetriever.getCurrentRoundInQuiznight(quiznightCode);\n    let teamsDataToSend = [];\n    for(let teamStat of quiznightRound.teamStatistics) {\n      let givenAnswerOfTeam = this.getGivenAnswerToQuestion(teamStat, question);\n\n      teamsDataToSend.push({\n        teamName: teamStat.team,\n        givenAnswer: givenAnswerOfTeam\n      });\n    }\n    return teamsDataToSend;\n  },\n  getTeamStatisticsOfTeamInCurrentRound(quiznightCode, teamName) {\n    let quiznight = this.getQuiznightByCode(quiznightCode);\n    let currentRoundState = this.getCurrentRoundInQuiznight(quiznightCode);\n    return currentRoundState.teamStatistics.find((teamStats) => {\n      return teamStats.team == teamName;\n    });\n  },\n  getCurrentRoundInQuiznight(quiznightCode) {\n    let quiznight = this.getQuiznightByCode(quiznightCode);\n    let amountOfRounds = quiznight.state.rounds.length;\n    return quiznight.state.rounds[amountOfRounds-1];\n  },\n  getTeamOfQuiznightByName(quiznightCode, teamName) {\n    let quiznight = this.getQuiznightByCode(quiznightCode);\n    \n    return quiznight.state.teams.find((team) => {\n      return team._id == teamName;\n    });\n  },\n  getAllQuiznights() {\n    return LocalDataStore.data.quizNights;\n  },\n  getQuiznightByCode(quiznightCode) {\n    return LocalDataStore.data.quizNights.find((quiznight) => {\n      return quiznight.quiznightCode == quiznightCode;\n    });\n  },\n  getTeamsOfQuiznight(quiznightCode) {\n    let quiznight = this.getQuiznightByCode(quiznightCode);\n    return quiznight.state.teams;\n  }\n}\n\nexport default LocalDataStoreRetriever;"]}