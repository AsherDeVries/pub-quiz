{"version":3,"sources":["../../../../src/websockets/data-stores/local/index.js"],"names":["LocalDataStoreHandler","addQuiznightToCache","quiznightCode","data","quizNights","push","state","teams","rounds","connections","console","log","JSON","stringify","addChosenQuestionsToRound","chosenQuestions","round","getCurrentRoundInQuiznight","addTeamConnectionToCache","teamName","socket","quiznight","getQuiznightByCode","socketId","id","saveNewQuiznightRoundToCache","newRoundNumber","length","newTeamStatistics","team","_id","givenAnswers","correctAnswersAmount","teamStatistics","removeTeamInQuiznightFromCache","getTeamOfQuiznightByName","index","indexOf","teamConnections","i","splice","saveNewTeamInQuiznightToCache","roundPoints","getSocketIdFromTeam","find","object","incrementCorrectAnswersOfTeam","getTeamStatisticsOfTeamInCurrentRound","saveAnswerOfTeamInRoundToCache","question","answer","teamHasGivenAnswerForQuestion","givenAnswer","getGivenAnswerToQuestion","value","updateRoundPointsOfAllTeams","quiznightRound","topListTeams","sort","a","b","updateQuestionToReviewed","questionToUpdate","q","hasBeenReviewed","removeQuiznightByCode","quiznights","getAllQuiznights"],"mappings":"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","file":"index.js","sourcesContent":["import LocalDataStoreRetriever from './retriever';\nimport LocalDataStore from './store';\n\nconst LocalDataStoreHandler = {\n  addQuiznightToCache(quiznightCode) {\n    LocalDataStore.data.quizNights.push({\n      quiznightCode: quiznightCode,\n      state: {\n        teams: [],\n        rounds: []\n      },\n      connections: {\n        teams: []\n      }\n    });\n    console.log('-- IN addQuiznightToCache --');\n    console.log(JSON.stringify(LocalDataStore.data.quizNights));\n  },\n  addChosenQuestionsToRound(quiznightCode, chosenQuestions) {\n    let round = LocalDataStoreRetriever.getCurrentRoundInQuiznight(quiznightCode);\n    round.chosenQuestions = chosenQuestions;\n  },\n  addTeamConnectionToCache(quiznightCode, teamName, socket) {\n    let quiznight = LocalDataStoreRetriever.getQuiznightByCode(quiznightCode);\n    quiznight.connections.teams.push({\n      teamName: teamName,\n      socketId: socket.id\n    });\n    console.log('-- IN addTeamToCache --');\n    console.log(JSON.stringify(LocalDataStore.data.quizNights));\n  },\n  saveNewQuiznightRoundToCache(quiznightCode) {\n    let quiznight = LocalDataStoreRetriever.getQuiznightByCode(quiznightCode);\n    let newRoundNumber = quiznight.state.rounds.length+1;\n\n    let newTeamStatistics = [];\n    for(let team of quiznight.state.teams) {\n      newTeamStatistics.push({\n        team: team._id,\n        givenAnswers: [],\n        correctAnswersAmount: 0\n      })\n    }\n\n    quiznight.state.rounds.push({\n      _id: newRoundNumber,\n      teamStatistics: newTeamStatistics\n    });\n    console.log('-- IN saveNewQuiznightRoundToCache --');\n    console.log(JSON.stringify(LocalDataStore.data.quizNights));\n  },\n  removeTeamInQuiznightFromCache(quiznightCode, teamName) {\n    let quiznight = LocalDataStoreRetriever.getQuiznightByCode(quiznightCode);\n    let team = LocalDataStoreRetriever.getTeamOfQuiznightByName(quiznightCode, teamName);\n\n    var index = quiznight.state.teams.indexOf(team);\n    let teamConnections = quiznight.connections.teams;\n    // remove connection\n    for(let i = 0; i < teamConnections.length; i++) {\n      if(teamConnections[i].teamName == teamName) {\n        teamConnections.splice(i, 1);\n      }\n    }\n    // remove team data\n    quiznight.state.teams.splice(index, 1);\n    console.log('-- IN removeTeamInQuiznightFromCache --');\n    console.log(JSON.stringify(LocalDataStore.data.quizNights));\n  },\n  saveNewTeamInQuiznightToCache(quiznightCode, teamName) {\n    let quiznight = LocalDataStoreRetriever.getQuiznightByCode(quiznightCode);\n    quiznight.state.teams.push({\n      _id: teamName,\n      roundPoints: 0\n    });\n    console.log('-- IN saveNewTeamInQuiznightToCache --');\n    console.log(JSON.stringify(LocalDataStore.data.quizNights));\n  },\n  getSocketIdFromTeam(quiznightCode, teamName) {\n    let quiznight = LocalDataStoreRetriever.getQuiznightByCode(quiznightCode);\n    let team = quiznight.connections.teams.find((object) => {\n      return object.teamName == teamName;\n    });\n    console.log('-- IN getSocketIdFromTeam --');\n    console.log(JSON.stringify(LocalDataStore.data.quizNights));\n    return team.socketId;\n  },\n  incrementCorrectAnswersOfTeam(quiznightCode, round, teamName) {\n    let teamStatistics = LocalDataStoreRetriever.getTeamStatisticsOfTeamInCurrentRound(quiznightCode, teamName);\n    teamStatistics.correctAnswersAmount++;\n    console.log('-- IN incrementCorrectAnswersOfTeam --');\n    console.log(JSON.stringify(LocalDataStore.data.quizNights));\n  },\n  saveAnswerOfTeamInRoundToCache(quiznightCode, round, teamName, question, answer) {\n    let teamStatistics = LocalDataStoreRetriever.getTeamStatisticsOfTeamInCurrentRound(quiznightCode, teamName);\n    if(this.teamHasGivenAnswerForQuestion(teamStatistics, question)) {\n      let givenAnswer = LocalDataStoreRetriever.getGivenAnswerToQuestion(teamStatistics, question);\n      givenAnswer.value = answer;\n    } else {\n      teamStatistics.givenAnswers.push({\n        question: question,\n        value: answer\n      });\n    }\n    console.log('-- IN saveAnswerOfTeamInRoundToCache --');\n    console.log(JSON.stringify(LocalDataStore.data.quizNights));\n  },\n  teamHasGivenAnswerForQuestion(teamStatistics, question) {\n    return LocalDataStoreRetriever.getGivenAnswerToQuestion(teamStatistics, question) != null;\n  },\n  updateRoundPointsOfAllTeams(quiznightCode) {\n    let quiznightRound = LocalDataStoreRetriever.getCurrentRoundInQuiznight(quiznightCode);\n    let topListTeams = quiznightRound.teamStatistics.sort((a, b) => {\n      return b.correctAnswersAmount - a.correctAnswersAmount;\n    })\n\n    for(let i = 0; i < topListTeams.length; i++) {\n      let team = LocalDataStoreRetriever.getTeamOfQuiznightByName(quiznightCode, topListTeams[i].team);\n      console.log(team);\n      if(i == 0) {\n        team.roundPoints = 4;\n      }\n      else if(i == 1) {\n        team.roundPoints = 2;\n      }\n      else if(i == 2) {\n        team.roundPoints = 1;\n      } else {\n        team.roundPoints = 0.1;\n      }\n    }\n    console.log('-- IN updateRoundPointsOfAllTeams --');\n    console.log(JSON.stringify(LocalDataStore.data.quizNights));\n  },\n  updateQuestionToReviewed(quiznightCode, question) {\n    let round = LocalDataStoreRetriever.getCurrentRoundInQuiznight(quiznightCode);\n    console.log(round);\n    let questionToUpdate = round.chosenQuestions.find((q) => {\n      return q._id == question;\n    })\n    questionToUpdate.hasBeenReviewed = true;\n  },\n  removeQuiznightByCode(quiznightCode) {\n    let quiznights = LocalDataStoreRetriever.getAllQuiznights(quiznightCode);\n    for(let i = 0; i < quiznights.length; i++) {\n      if(quiznights[i].quiznight == quiznightCode) {\n        quiznights.splice(i, 1);\n      }\n    }\n  }\n};\n\nexport default LocalDataStoreHandler;"]}