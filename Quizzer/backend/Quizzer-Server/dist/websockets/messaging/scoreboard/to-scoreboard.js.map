{"version":3,"sources":["../../../../src/websockets/messaging/scoreboard/to-scoreboard.js"],"names":["ScoreboardMessageSender","toNamespace","namespace","usingSocket","socket","sendMessage","messageType","message","emit","sendMessageToAllScoreboards","to","SCOREBOARD","sendNewQuestionMessage","quiznightCode","question","category","data","getGivenAnswersOfQuestionPerTeam","answersPerTeam","Object","create","answerOfTeam","hasAnswered","NEW_QUESTION","teams","sendShowQuestionResultsMessage","SHOW_QUESTION_RESULTS","sendShowScoresMessage","getQuiznightByCode","qn","state","quizRound","getCurrentRoundInQuiznight","team","teamStats","getTeamStatisticsOfTeamInCurrentRound","_id","score","round","questionsCorrect","correctAnswersAmount","SHOW_SCORES"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,0BAA0B;AAC9BC,aAD8B,uBAClBC,SADkB,EACP;AACrB,SAAKA,SAAL,GAAiBA,SAAjB;AACA,WAAO,IAAP;AACD,GAJ6B;AAK9BC,aAL8B,uBAKlBC,MALkB,EAKV;AAClB,SAAKA,MAAL,GAAcA,MAAd;AACA,WAAO,IAAP;AACD,GAR6B;AAS9BC,aAT8B,uBASlBC,WATkB,EASLC,OATK,EASI;AAChC,SAAKH,MAAL,CAAYI,IAAZ,CAAiBF,WAAjB,EAA8BC,OAA9B;AACD,GAX6B;AAY9BE,6BAZ8B,uCAYFH,WAZE,EAYWC,OAZX,EAYoB;AAChD,SAAKL,SAAL,CAAeQ,EAAf,CAAkB,gBAAWC,UAA7B,EAAyCH,IAAzC,CAA8CF,WAA9C,EAA2DC,OAA3D;AACD,GAd6B;AAe9BK,wBAf8B,kCAePC,aAfO,EAeQC,QAfR,EAekBC,QAflB,EAe4B;AACxD,QAAIC,OAAO,oBAAwBC,gCAAxB,CAAyDJ,aAAzD,EAAwEC,QAAxE,CAAX;AACA,QAAII,iBAAiBC,OAAOC,MAAP,CAAcJ,IAAd,CAArB;AAFwD;AAAA;AAAA;;AAAA;AAGxD,2BAAwBE,cAAxB,8HAAwC;AAAA,YAAhCG,YAAgC;;AACtCA,qBAAaC,WAAb,GAA2B,KAA3B;AACD;AALuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOxD,SAAKb,2BAAL,CAAiC,wBAAcc,YAA/C,EAA6D;AAC3DT,gBAAU,EAAEA,UAAUA,QAAZ,EAAsBC,UAAUA,QAAhC,EADiD;AAE3DS,aAAON;AAFoD,KAA7D;AAID,GA1B6B;AA2B9BO,gCA3B8B,0CA2BCZ,aA3BD,EA2BgBC,QA3BhB,EA2B0BC,QA3B1B,EA2BoC;AAChE,SAAKN,2BAAL,CAAiC,wBAAciB,qBAA/C,EAAsE;AACpEZ,gBAAU,EAAEA,UAAUA,QAAZ,EAAsBC,UAAUA,QAAhC,EAD0D;AAEpES,aAAO,oBAAwBP,gCAAxB,CAAyDJ,aAAzD,EAAwEC,QAAxE;AAF6D,KAAtE;AAID,GAhC6B;AAiC9Ba,uBAjC8B,iCAiCRd,aAjCQ,EAiCO;AACnC,QAAIG,OAAO,oBAAwBY,kBAAxB,CAA2Cf,aAA3C,CAAX;;AAEA,QAAIgB,KAAKV,OAAOC,MAAP,CAAcJ,IAAd,CAAT;AACA,QAAIQ,QAAQK,GAAGC,KAAH,CAASN,KAArB;AACA,QAAIO,YAAY,oBAAwBC,0BAAxB,CAAmDnB,aAAnD,CAAhB;;AALmC;AAAA;AAAA;;AAAA;AAOnC,4BAAgBW,KAAhB,mIAAuB;AAAA,YAAfS,IAAe;;AACrB,YAAIC,YAAY,oBAAwBC,qCAAxB,CAA8DtB,aAA9D,EAA6EoB,KAAKG,GAAlF,CAAhB;AACAH,aAAKI,KAAL,GAAa;AACXC,iBAAOP,UAAUK,GADN;AAEXG,4BAAkBL,UAAUM;AAFjB,SAAb;AAID;AAbkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAenC,SAAK/B,2BAAL,CAAiC,wBAAcgC,WAA/C,EAA4D;AAC1DjB,aAAOA;AADmD,KAA5D;AAGD;AAnD6B,CAAhC;;kBAsDexB,uB","file":"to-scoreboard.js","sourcesContent":["import MESSAGE_TYPES from '../../constants/message_types';\nimport ROOM_NAMES from '../../constants/rooms';\nimport LocalDataStoreRetriever from '../../data-stores/local/retriever';\n\nconst ScoreboardMessageSender = {\n  toNamespace(namespace) {\n    this.namespace = namespace;\n    return this;\n  },\n  usingSocket(socket) {\n    this.socket = socket;\n    return this;\n  },\n  sendMessage(messageType, message) {\n    this.socket.emit(messageType, message);\n  },\n  sendMessageToAllScoreboards(messageType, message) {\n    this.namespace.to(ROOM_NAMES.SCOREBOARD).emit(messageType, message);\n  },\n  sendNewQuestionMessage(quiznightCode, question, category) {\n    let data = LocalDataStoreRetriever.getGivenAnswersOfQuestionPerTeam(quiznightCode, question);\n    let answersPerTeam = Object.create(data);\n    for(let answerOfTeam of answersPerTeam) {\n      answerOfTeam.hasAnswered = false;\n    }\n\n    this.sendMessageToAllScoreboards(MESSAGE_TYPES.NEW_QUESTION, {\n      question: { question: question, category: category },\n      teams: answersPerTeam\n    });\n  },\n  sendShowQuestionResultsMessage(quiznightCode, question, category) {\n    this.sendMessageToAllScoreboards(MESSAGE_TYPES.SHOW_QUESTION_RESULTS, {\n      question: { question: question, category: category },\n      teams: LocalDataStoreRetriever.getGivenAnswersOfQuestionPerTeam(quiznightCode, question)\n    });\n  },\n  sendShowScoresMessage(quiznightCode) {\n    let data = LocalDataStoreRetriever.getQuiznightByCode(quiznightCode);\n    \n    let qn = Object.create(data);\n    let teams = qn.state.teams;\n    let quizRound = LocalDataStoreRetriever.getCurrentRoundInQuiznight(quiznightCode);\n\n    for(let team of teams) {\n      let teamStats = LocalDataStoreRetriever.getTeamStatisticsOfTeamInCurrentRound(quiznightCode, team._id);\n      team.score = {\n        round: quizRound._id,\n        questionsCorrect: teamStats.correctAnswersAmount\n      }\n    }\n\n    this.sendMessageToAllScoreboards(MESSAGE_TYPES.SHOW_SCORES, {\n      teams: teams\n    });\n  }\n};\n\nexport default ScoreboardMessageSender;"]}