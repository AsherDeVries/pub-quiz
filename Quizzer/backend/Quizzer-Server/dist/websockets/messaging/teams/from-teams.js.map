{"version":3,"sources":["../../../../src/websockets/messaging/teams/from-teams.js"],"names":["socket","quiznightNamespace","on","CONNECT_TEAM","message","quiznightCode","currentAmountOfConnections","getTeamsOfQuiznight","MAX_ALLOWED_CONNECTIONS","length","addTeamConnectionToCache","teamName","saveNewTeamInQuiznightToCache","then","toNamespace","usingSocket","sendMessageToQuizmaster","TEAM_JOINED","socketId","id","sendMessageToSocketViaId","PENDING","join","TEAMS","SUBMIT_ANSWER","qnCode","saveAnswerOfTeamInRoundToCache","round","question","answer","getCurrentRoundInQuiznight","ANSWER_RECEIVED","reSubmit","sendMessageToAllScoreboards","ANSWER_SUBMITTED","hasAnswered"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAEe,UAACA,MAAD,EAASC,kBAAT,EAAgC;AAC7CD,SAAOE,EAAP,CAAU,wBAAcC,YAAxB,EAAsC,UAACC,OAAD,EAAa;AACjD,QAAIC,gBAAgB,uCAA2BL,MAA3B,CAApB;;AAEA,QAAIM,6BAA6B,oBAAwBC,mBAAxB,CAA4CF,aAA5C,CAAjC;AACA,QAAMG,0BAA0B,CAAhC;AACA,QAAGF,2BAA2BG,MAA3B,GAAoCD,uBAAvC,EAAgE;AAC9D,sBACGE,wBADH,CAC4BL,aAD5B,EAC2CD,QAAQO,QADnD,EAC6DX,MAD7D;;AAGA,sBACGY,6BADH,CACiCP,aADjC,EACgDD,QAAQO,QADxD;;AAGA,yBACGC,6BADH,CACiCP,aADjC,EACgDD,QAAQO,QADxD,EAEGE,IAFH,CAEQ,YAAM;AACV,+BACGC,WADH,CACeb,kBADf,EAEGc,WAFH,CAEef,MAFf,EAGGgB,uBAHH,CAG2B,wBAAcC,WAHzC,EAGsD;AAClDN,oBAAUP,QAAQO,QADgC;AAElDO,oBAAUlB,OAAOmB;AAFiC,SAHtD;;AAQA,0BACGL,WADH,CACeb,kBADf,EAEGc,WAFH,CAEef,MAFf,EAGGoB,wBAHH,CAG4BpB,OAAOmB,EAHnC,EAGuC,wBAAcE,OAHrD,EAG8D,iEAH9D;;AAKArB,eAAOsB,IAAP,CAAY,gBAAWC,KAAvB;AACD,OAjBH;AAkBD,KAzBD,MAyBO;AACL,wBACGT,WADH,CACeb,kBADf,EAEGc,WAFH,CAEef,MAFf,EAGGoB,wBAHH,CAG4BpB,OAAOmB,EAHnC,EAGuC,wBAAcE,OAHrD,EAG8D,2BAH9D;AAID;AACF,GApCD;;AAsCArB,SAAOE,EAAP,CAAU,wBAAcsB,aAAxB,EAAuC,UAACpB,OAAD,EAAa;AAClD,QAAIqB,SAAS,uCAA2BzB,MAA3B,CAAb;AACA,oBACG0B,8BADH,CACkCD,MADlC,EAC0CrB,QAAQuB,KADlD,EACyDvB,QAAQO,QADjE,EAC2EP,QAAQwB,QADnF,EAC6FxB,QAAQyB,MADrG;;AAGA,QAAIF,QAAQ,oBAAwBG,0BAAxB,CAAmDL,MAAnD,CAAZ;;AAEA,uBACGC,8BADH,CACkCD,MADlC,EAC0CE,KAD1C,EACiDvB,QAAQO,QADzD,EACmEP,QAAQwB,QAD3E,EACqFxB,QAAQyB,MAD7F,EAEGhB,IAFH,CAEQ,YAAM;AACV,6BACGC,WADH,CACeb,kBADf,EAEGc,WAFH,CAEef,MAFf,EAGGgB,uBAHH,CAG2B,wBAAce,eAHzC,EAG0D,EAAEpB,UAAUP,QAAQO,QAApB,EAA8BkB,QAAQzB,QAAQyB,MAA9C,EAAsDG,UAAU5B,QAAQ4B,QAAxE,EAH1D;;AAKA,6BACGC,2BADH,CAC+B,wBAAcC,gBAD7C,EAC+D,EAAEvB,UAAUP,QAAQO,QAApB,EAA8BwB,aAAa,IAA3C,EAD/D;AAED,KAVH;AAWD,GAlBD;AAmBD,C","file":"from-teams.js","sourcesContent":["import DatabaseCacheHandler from '../../data-stores/database';\nimport { getQuiznightCodeFromSocket } from '../../utils';\nimport MESSAGE_TYPES from '../../constants/message_types';\nimport QuizmasterMessageSender from '../quizmaster/to-quizmaster';\nimport Quiznight from '../../../models/Quiznight';\nimport ROOM_NAMES from '../../constants/rooms';\nimport ScoreboardMessageSender from '../scoreboard/to-scoreboard';\nimport TeamMessageSender from '../teams/to-teams';\nimport LocalDataStoreHandler from '../../data-stores/local';\nimport LocalDataStoreRetriever from '../../data-stores/local/retriever';\n\nexport default (socket, quiznightNamespace) => {\n  socket.on(MESSAGE_TYPES.CONNECT_TEAM, (message) => {\n    let quiznightCode = getQuiznightCodeFromSocket(socket);\n\n    let currentAmountOfConnections = LocalDataStoreRetriever.getTeamsOfQuiznight(quiznightCode);\n    const MAX_ALLOWED_CONNECTIONS = 6;\n    if(currentAmountOfConnections.length < MAX_ALLOWED_CONNECTIONS) {\n      LocalDataStoreHandler\n        .addTeamConnectionToCache(quiznightCode, message.teamName, socket);\n      \n      LocalDataStoreHandler\n        .saveNewTeamInQuiznightToCache(quiznightCode, message.teamName)\n\n      DatabaseCacheHandler\n        .saveNewTeamInQuiznightToCache(quiznightCode, message.teamName)\n        .then(() => {\n          QuizmasterMessageSender\n            .toNamespace(quiznightNamespace)\n            .usingSocket(socket)\n            .sendMessageToQuizmaster(MESSAGE_TYPES.TEAM_JOINED, {\n              teamName: message.teamName,\n              socketId: socket.id\n            });\n\n          TeamMessageSender\n            .toNamespace(quiznightNamespace)\n            .usingSocket(socket)\n            .sendMessageToSocketViaId(socket.id, MESSAGE_TYPES.PENDING, 'Welcome to the quiznight!, waiting for approval of quizmaster..');\n\n          socket.join(ROOM_NAMES.TEAMS);\n        });\n    } else {\n      TeamMessageSender\n        .toNamespace(quiznightNamespace)\n        .usingSocket(socket)\n        .sendMessageToSocketViaId(socket.id, MESSAGE_TYPES.PENDING, 'Sorry, quiznight is full.');\n    }\n  });\n\n  socket.on(MESSAGE_TYPES.SUBMIT_ANSWER, (message) => {\n    let qnCode = getQuiznightCodeFromSocket(socket);\n    LocalDataStoreHandler\n      .saveAnswerOfTeamInRoundToCache(qnCode, message.round, message.teamName, message.question, message.answer);\n\n    let round = LocalDataStoreRetriever.getCurrentRoundInQuiznight(qnCode);\n\n    DatabaseCacheHandler\n      .saveAnswerOfTeamInRoundToCache(qnCode, round, message.teamName, message.question, message.answer)\n      .then(() => {\n        QuizmasterMessageSender\n          .toNamespace(quiznightNamespace)\n          .usingSocket(socket)\n          .sendMessageToQuizmaster(MESSAGE_TYPES.ANSWER_RECEIVED, { teamName: message.teamName, answer: message.answer, reSubmit: message.reSubmit });\n\n        ScoreboardMessageSender\n          .sendMessageToAllScoreboards(MESSAGE_TYPES.ANSWER_SUBMITTED, { teamName: message.teamName, hasAnswered: true });\n      });\n  });\n}"]}