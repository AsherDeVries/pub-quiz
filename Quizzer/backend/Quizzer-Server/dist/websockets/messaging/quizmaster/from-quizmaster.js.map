{"version":3,"sources":["../../../../src/websockets/messaging/quizmaster/from-quizmaster.js"],"names":["socket","quiznightNamespace","on","CONNECT_QUIZMASTER","message","join","QUIZMASTER","toNamespace","usingSocket","sendMessage","PENDING","ACCEPT_TEAM","messageToTeam","accepted","isAccepted","qnCode","removeTeamInQuiznightFromCache","teamName","then","disconnectSocket","socketId","sendMessageToSocketViaId","TEAM_ALLOWED","START_ROUND","saveNewQuiznightRoundToCache","result","sendMessageToAllTeams","NEXT_QUESTION","NEW_QUESTION","question","CLOSE_QUESTION","UPDATE_SCORE","givenAnswers","givenAnswer","getSocketIdFromTeam","ANSWER_REVIEWED","correctAnswer","answer","isCorrect","saveAnswerOfTeamInRoundToCache","round","END_ROUND","END_GAME"],"mappings":"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","file":"from-quizmaster.js","sourcesContent":["import DatabaseCacheHandler from '../../caching/database';\nimport { getQuiznightCodeFromSocket } from '../../utils';\nimport MESSAGE_TYPES from '../../constants/message_types';\nimport QuizmasterMessageSender from '../quizmaster/to-quizmaster';\nimport Quiznight from '../../../models/Quiznight';\nimport ROOM_NAMES from '../../constants/rooms';\nimport TeamMessageSender from '../teams/to-teams';\nimport TeamWebsocketConnectionsCacheHandler from '../../caching/connections';\n\nexport default (socket, quiznightNamespace) => {\n\n  socket.on(MESSAGE_TYPES.CONNECT_QUIZMASTER, (message) => {\n    socket.join(ROOM_NAMES.QUIZMASTER);\n\n    QuizmasterMessageSender\n      .toNamespace(quiznightNamespace)\n      .usingSocket(socket)\n      .sendMessage(MESSAGE_TYPES.PENDING, 'Welcome to the quiznight quizmaster!, waiting for teams to apply..')\n  });\n\n  socket.on(MESSAGE_TYPES.ACCEPT_TEAM, (message) => {\n    let messageToTeam = { accepted: message.isAccepted };\n    if(!message.isAccepted) {\n      let qnCode = getQuiznightCodeFromSocket(socket);\n      DatabaseCacheHandler\n        .removeTeamInQuiznightFromCache(qnCode, message.teamName)\n      .then(TeamMessageSender.disconnectSocket(message.socketId));\n    }\n\n    TeamMessageSender\n      .toNamespace(quiznightNamespace)\n      .usingSocket(socket)\n      .sendMessageToSocketViaId(message.socketId, MESSAGE_TYPES.TEAM_ALLOWED, messageToTeam);\n  });\n\n  socket.on(MESSAGE_TYPES.START_ROUND, (message) => {\n    let qnCode = getQuiznightCodeFromSocket(socket);\n    DatabaseCacheHandler\n      .saveNewQuiznightRoundToCache(qnCode)\n      .then((result) => {\n        TeamMessageSender\n          .toNamespace(quiznightNamespace)\n          .usingSocket(socket)\n          .sendMessageToAllTeams(MESSAGE_TYPES.PENDING, 'Round has started, waiting for next question.')\n      });\n  });\n\n  socket.on(MESSAGE_TYPES.NEXT_QUESTION, (message) => {\n    TeamMessageSender\n      .toNamespace(quiznightNamespace)\n      .usingSocket(socket)\n      .sendMessageToAllTeams(MESSAGE_TYPES.NEW_QUESTION, { question: message.question });\n  });\n\n  socket.on(MESSAGE_TYPES.CLOSE_QUESTION, (message) => {\n    TeamMessageSender\n      .toNamespace(quiznightNamespace)\n      .usingSocket(socket)\n      .sendMessageToAllTeams(MESSAGE_TYPES.PENDING, 'Quizmaster is currently reviewing answers.');\n    //quiznightNamespace.to(ROOM_NAMES.TEAMS).emit(MESSAGE_TYPES.QUESTION_CLOSED, { question: message.question, givenAnswers: db.givenAnswers })    \n    // WANNEER MOET SCOREBOARD GEINFORMEERD WORDEN OVER ANTWOORDEN VAN TEAMS??\n  });\n\n  socket.on(MESSAGE_TYPES.UPDATE_SCORE, (message) => {\n    // message.question\n    // message.givenAnswers: [\n    // teamName: String,\n    // answer: String\n    // isCorrect: Boolean\n    //]\n    // Loop door lijst met teams\n    // 1. Informeer over antwoord review\n    // 2. Zet aantal goede antwoorden per team in db.\n    // 3. Zet question op gereviewed in db\n    let qnCode = getQuiznightCodeFromSocket(socket);\n\n    for(let givenAnswer of message.givenAnswers) {\n      let socketId = TeamWebsocketConnectionsCacheHandler\n        .getSocketIdFromTeam(qnCode, givenAnswer.teamName);\n      \n      TeamMessageSender\n        .toNamespace(quiznightNamespace)\n        .sendMessageToSocketViaId(socketId, MESSAGE_TYPES.ANSWER_REVIEWED, { correctAnswer: message.answer, isCorrect: givenAnswer.isCorrect });\n\n      DatabaseCacheHandler\n        .saveAnswerOfTeamInRoundToCache(qnCode, message.round, givenAnswer.teamName, message.question, givenAnswer.answer);\n    }\n  });\n\n  socket.on(MESSAGE_TYPES.END_ROUND, (message) => {\n    // Loop door lijst met teams\n    // 1. update roundpoints in database\n  });\n\n  socket.on(MESSAGE_TYPES.END_GAME, (message) => {\n    // Loop door lijst met teams\n    // 1. haal quiznight uit database\n  });\n}"]}