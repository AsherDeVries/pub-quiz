{"version":3,"sources":["../../../../src/websockets/data-stores/local/index.js"],"names":["LocalDataStoreHandler","addQuiznightToCache","quiznightCode","data","quizNights","push","state","teams","rounds","connections","addChosenQuestionsToRound","chosenQuestions","round","getCurrentRoundInQuiznight","addTeamConnectionToCache","teamName","socket","quiznight","getQuiznightByCode","socketId","id","saveNewQuiznightRoundToCache","newRoundNumber","length","newTeamStatistics","team","_id","givenAnswers","correctAnswersAmount","teamStatistics","removeTeamInQuiznightFromCache","getTeamOfQuiznightByName","index","indexOf","teamConnections","i","splice","saveNewTeamInQuiznightToCache","roundPoints","getSocketIdFromTeam","find","object","incrementCorrectAnswersOfTeam","getTeamStatisticsOfTeamInCurrentRound","saveAnswerOfTeamInRoundToCache","question","answer","teamHasGivenAnswerForQuestion","givenAnswer","getGivenAnswerToQuestion","value","updateRoundPointsOfAllTeams","quiznightRound","topListTeams","sort","a","b","getTeamsOfQuiznight","updateQuestionToReviewed","questionToUpdate","q","hasBeenReviewed","removeQuiznightByCode","quiznights","getAllQuiznights"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,wBAAwB;AAC5BC,qBAD4B,+BACRC,aADQ,EACO;AACjC,oBAAeC,IAAf,CAAoBC,UAApB,CAA+BC,IAA/B,CAAoC;AAClCH,qBAAeA,aADmB;AAElCI,aAAO;AACLC,eAAO,EADF;AAELC,gBAAQ;AAFH,OAF2B;AAMlCC,mBAAa;AACXF,eAAO;AADI;AANqB,KAApC;AAUD,GAZ2B;AAa5BG,2BAb4B,qCAaFR,aAbE,EAaaS,eAbb,EAa8B;AACxD,QAAIC,QAAQ,oBAAwBC,0BAAxB,CAAmDX,aAAnD,CAAZ;AACAU,UAAMD,eAAN,GAAwBA,eAAxB;AACD,GAhB2B;AAiB5BG,0BAjB4B,oCAiBHZ,aAjBG,EAiBYa,QAjBZ,EAiBsBC,MAjBtB,EAiB8B;AACxD,QAAIC,YAAY,oBAAwBC,kBAAxB,CAA2ChB,aAA3C,CAAhB;AACAe,cAAUR,WAAV,CAAsBF,KAAtB,CAA4BF,IAA5B,CAAiC;AAC/BU,gBAAUA,QADqB;AAE/BI,gBAAUH,OAAOI;AAFc,KAAjC;AAID,GAvB2B;AAwB5BC,8BAxB4B,wCAwBCnB,aAxBD,EAwBgB;AAC1C,QAAIe,YAAY,oBAAwBC,kBAAxB,CAA2ChB,aAA3C,CAAhB;AACA,QAAIoB,iBAAiBL,UAAUX,KAAV,CAAgBE,MAAhB,CAAuBe,MAAvB,GAA8B,CAAnD;;AAEA,QAAIC,oBAAoB,EAAxB;AAJ0C;AAAA;AAAA;;AAAA;AAK1C,2BAAgBP,UAAUX,KAAV,CAAgBC,KAAhC,8HAAuC;AAAA,YAA/BkB,IAA+B;;AACrCD,0BAAkBnB,IAAlB,CAAuB;AACrBoB,gBAAMA,KAAKC,GADU;AAErBC,wBAAc,EAFO;AAGrBC,gCAAsB;AAHD,SAAvB;AAKD;AAXyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAa1CX,cAAUX,KAAV,CAAgBE,MAAhB,CAAuBH,IAAvB,CAA4B;AAC1BqB,WAAKJ,cADqB;AAE1BO,sBAAgBL;AAFU,KAA5B;AAID,GAzC2B;AA0C5BM,gCA1C4B,0CA0CG5B,aA1CH,EA0CkBa,QA1ClB,EA0C4B;AACtD,QAAIE,YAAY,oBAAwBC,kBAAxB,CAA2ChB,aAA3C,CAAhB;AACA,QAAIuB,OAAO,oBAAwBM,wBAAxB,CAAiD7B,aAAjD,EAAgEa,QAAhE,CAAX;;AAEA,QAAIiB,QAAQf,UAAUX,KAAV,CAAgBC,KAAhB,CAAsB0B,OAAtB,CAA8BR,IAA9B,CAAZ;AACA,QAAIS,kBAAkBjB,UAAUR,WAAV,CAAsBF,KAA5C;AACA;AACA,SAAI,IAAI4B,IAAI,CAAZ,EAAeA,IAAID,gBAAgBX,MAAnC,EAA2CY,GAA3C,EAAgD;AAC9C,UAAGD,gBAAgBC,CAAhB,EAAmBpB,QAAnB,IAA+BA,QAAlC,EAA4C;AAC1CmB,wBAAgBE,MAAhB,CAAuBD,CAAvB,EAA0B,CAA1B;AACD;AACF;AACD;AACAlB,cAAUX,KAAV,CAAgBC,KAAhB,CAAsB6B,MAAtB,CAA6BJ,KAA7B,EAAoC,CAApC;AACD,GAxD2B;AAyD5BK,+BAzD4B,yCAyDEnC,aAzDF,EAyDiBa,QAzDjB,EAyD2B;AACrD,QAAIE,YAAY,oBAAwBC,kBAAxB,CAA2ChB,aAA3C,CAAhB;AACAe,cAAUX,KAAV,CAAgBC,KAAhB,CAAsBF,IAAtB,CAA2B;AACzBqB,WAAKX,QADoB;AAEzBuB,mBAAa;AAFY,KAA3B;AAID,GA/D2B;AAgE5BC,qBAhE4B,+BAgERrC,aAhEQ,EAgEOa,QAhEP,EAgEiB;AAC3C,QAAIE,YAAY,oBAAwBC,kBAAxB,CAA2ChB,aAA3C,CAAhB;AACA,QAAIuB,OAAOR,UAAUR,WAAV,CAAsBF,KAAtB,CAA4BiC,IAA5B,CAAiC,UAACC,MAAD,EAAY;AACtD,aAAOA,OAAO1B,QAAP,IAAmBA,QAA1B;AACD,KAFU,CAAX;AAGA,WAAOU,KAAKN,QAAZ;AACD,GAtE2B;AAuE5BuB,+BAvE4B,yCAuEExC,aAvEF,EAuEiBU,KAvEjB,EAuEwBG,QAvExB,EAuEkC;AAC5D,QAAIc,iBAAiB,oBAAwBc,qCAAxB,CAA8DzC,aAA9D,EAA6Ea,QAA7E,CAArB;AACAc,mBAAeD,oBAAf;AACD,GA1E2B;AA2E5BgB,gCA3E4B,0CA2EG1C,aA3EH,EA2EkBU,KA3ElB,EA2EyBG,QA3EzB,EA2EmC8B,QA3EnC,EA2E6CC,MA3E7C,EA2EqD;AAC/E,QAAIjB,iBAAiB,oBAAwBc,qCAAxB,CAA8DzC,aAA9D,EAA6Ea,QAA7E,CAArB;AACA,QAAG,KAAKgC,6BAAL,CAAmClB,cAAnC,EAAmDgB,QAAnD,CAAH,EAAiE;AAC/D,UAAIG,cAAc,oBAAwBC,wBAAxB,CAAiDpB,cAAjD,EAAiEgB,QAAjE,CAAlB;AACAG,kBAAYE,KAAZ,GAAoBJ,MAApB;AACD,KAHD,MAGO;AACLjB,qBAAeF,YAAf,CAA4BtB,IAA5B,CAAiC;AAC/BwC,kBAAUA,QADqB;AAE/BK,eAAOJ;AAFwB,OAAjC;AAID;AACF,GAtF2B;AAuF5BC,+BAvF4B,yCAuFElB,cAvFF,EAuFkBgB,QAvFlB,EAuF4B;AACtD,WAAO,oBAAwBI,wBAAxB,CAAiDpB,cAAjD,EAAiEgB,QAAjE,KAA8E,IAArF;AACD,GAzF2B;AA0F5BM,6BA1F4B,uCA0FAjD,aA1FA,EA0Fe;AACzC,QAAIkD,iBAAiB,oBAAwBvC,0BAAxB,CAAmDX,aAAnD,CAArB;AACA,QAAImD,eAAeD,eAAevB,cAAf,CAA8ByB,IAA9B,CAAmC,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAC9D,aAAOA,EAAE5B,oBAAF,GAAyB2B,EAAE3B,oBAAlC;AACD,KAFkB,CAAnB;;AAIA,SAAI,IAAIO,IAAI,CAAZ,EAAeA,IAAIkB,aAAa9B,MAAhC,EAAwCY,GAAxC,EAA6C;AAC3C,UAAIV,OAAO,oBAAwBM,wBAAxB,CAAiD7B,aAAjD,EAAgEmD,aAAalB,CAAb,EAAgBV,IAAhF,CAAX;AACA,UAAGU,KAAK,CAAR,EAAW;AACTV,aAAKa,WAAL,GAAmB,CAAnB;AACD,OAFD,MAGK,IAAGH,KAAK,CAAR,EAAW;AACdV,aAAKa,WAAL,GAAmB,CAAnB;AACD,OAFI,MAGA,IAAGH,KAAK,CAAR,EAAW;AACdV,aAAKa,WAAL,GAAmB,CAAnB;AACD,OAFI,MAEE;AACLb,aAAKa,WAAL,GAAmB,GAAnB;AACD;AACF;AACD,QAAI/B,QAAQ,oBAAwBkD,mBAAxB,CAA4CvD,aAA5C,CAAZ;AACD,GA/G2B;AAgH5BwD,0BAhH4B,oCAgHHxD,aAhHG,EAgHY2C,QAhHZ,EAgHsB;AAChD,QAAIjC,QAAQ,oBAAwBC,0BAAxB,CAAmDX,aAAnD,CAAZ;AACA,QAAIyD,mBAAmB/C,MAAMD,eAAN,CAAsB6B,IAAtB,CAA2B,UAACoB,CAAD,EAAO;AACvD,aAAOA,EAAElC,GAAF,IAASmB,QAAhB;AACD,KAFsB,CAAvB;AAGAc,qBAAiBE,eAAjB,GAAmC,IAAnC;AACD,GAtH2B;AAuH5BC,uBAvH4B,iCAuHN5D,aAvHM,EAuHS;AACnC,QAAI6D,aAAa,oBAAwBC,gBAAxB,CAAyC9D,aAAzC,CAAjB;AACA,SAAI,IAAIiC,IAAI,CAAZ,EAAeA,IAAI4B,WAAWxC,MAA9B,EAAsCY,GAAtC,EAA2C;AACzC,UAAG4B,WAAW5B,CAAX,EAAclB,SAAd,IAA2Bf,aAA9B,EAA6C;AAC3C6D,mBAAW3B,MAAX,CAAkBD,CAAlB,EAAqB,CAArB;AACD;AACF;AACF;AA9H2B,CAA9B;;kBAiIenC,qB","file":"index.js","sourcesContent":["import LocalDataStoreRetriever from './retriever';\nimport LocalDataStore from './store';\n\nconst LocalDataStoreHandler = {\n  addQuiznightToCache(quiznightCode) {\n    LocalDataStore.data.quizNights.push({\n      quiznightCode: quiznightCode,\n      state: {\n        teams: [],\n        rounds: []\n      },\n      connections: {\n        teams: []\n      }\n    });\n  },\n  addChosenQuestionsToRound(quiznightCode, chosenQuestions) {\n    let round = LocalDataStoreRetriever.getCurrentRoundInQuiznight(quiznightCode);\n    round.chosenQuestions = chosenQuestions;\n  },\n  addTeamConnectionToCache(quiznightCode, teamName, socket) {\n    let quiznight = LocalDataStoreRetriever.getQuiznightByCode(quiznightCode);\n    quiznight.connections.teams.push({\n      teamName: teamName,\n      socketId: socket.id\n    });\n  },\n  saveNewQuiznightRoundToCache(quiznightCode) {\n    let quiznight = LocalDataStoreRetriever.getQuiznightByCode(quiznightCode);\n    let newRoundNumber = quiznight.state.rounds.length+1;\n\n    let newTeamStatistics = [];\n    for(let team of quiznight.state.teams) {\n      newTeamStatistics.push({\n        team: team._id,\n        givenAnswers: [],\n        correctAnswersAmount: 0\n      })\n    }\n\n    quiznight.state.rounds.push({\n      _id: newRoundNumber,\n      teamStatistics: newTeamStatistics\n    });\n  },\n  removeTeamInQuiznightFromCache(quiznightCode, teamName) {\n    let quiznight = LocalDataStoreRetriever.getQuiznightByCode(quiznightCode);\n    let team = LocalDataStoreRetriever.getTeamOfQuiznightByName(quiznightCode, teamName);\n\n    var index = quiznight.state.teams.indexOf(team);\n    let teamConnections = quiznight.connections.teams;\n    // remove connection\n    for(let i = 0; i < teamConnections.length; i++) {\n      if(teamConnections[i].teamName == teamName) {\n        teamConnections.splice(i, 1);\n      }\n    }\n    // remove team data\n    quiznight.state.teams.splice(index, 1);\n  },\n  saveNewTeamInQuiznightToCache(quiznightCode, teamName) {\n    let quiznight = LocalDataStoreRetriever.getQuiznightByCode(quiznightCode);\n    quiznight.state.teams.push({\n      _id: teamName,\n      roundPoints: 0\n    });\n  },\n  getSocketIdFromTeam(quiznightCode, teamName) {\n    let quiznight = LocalDataStoreRetriever.getQuiznightByCode(quiznightCode);\n    let team = quiznight.connections.teams.find((object) => {\n      return object.teamName == teamName;\n    });\n    return team.socketId;\n  },\n  incrementCorrectAnswersOfTeam(quiznightCode, round, teamName) {\n    let teamStatistics = LocalDataStoreRetriever.getTeamStatisticsOfTeamInCurrentRound(quiznightCode, teamName);\n    teamStatistics.correctAnswersAmount++;\n  },\n  saveAnswerOfTeamInRoundToCache(quiznightCode, round, teamName, question, answer) {\n    let teamStatistics = LocalDataStoreRetriever.getTeamStatisticsOfTeamInCurrentRound(quiznightCode, teamName);\n    if(this.teamHasGivenAnswerForQuestion(teamStatistics, question)) {\n      let givenAnswer = LocalDataStoreRetriever.getGivenAnswerToQuestion(teamStatistics, question);\n      givenAnswer.value = answer;\n    } else {\n      teamStatistics.givenAnswers.push({\n        question: question,\n        value: answer\n      });\n    }\n  },\n  teamHasGivenAnswerForQuestion(teamStatistics, question) {\n    return LocalDataStoreRetriever.getGivenAnswerToQuestion(teamStatistics, question) != null;\n  },\n  updateRoundPointsOfAllTeams(quiznightCode) {\n    let quiznightRound = LocalDataStoreRetriever.getCurrentRoundInQuiznight(quiznightCode);\n    let topListTeams = quiznightRound.teamStatistics.sort((a, b) => {\n      return b.correctAnswersAmount - a.correctAnswersAmount;\n    })\n\n    for(let i = 0; i < topListTeams.length; i++) {\n      let team = LocalDataStoreRetriever.getTeamOfQuiznightByName(quiznightCode, topListTeams[i].team);\n      if(i == 0) {\n        team.roundPoints = 4;\n      }\n      else if(i == 1) {\n        team.roundPoints = 2;\n      }\n      else if(i == 2) {\n        team.roundPoints = 1;\n      } else {\n        team.roundPoints = 0.1;\n      }\n    }\n    let teams = LocalDataStoreRetriever.getTeamsOfQuiznight(quiznightCode);\n  },\n  updateQuestionToReviewed(quiznightCode, question) {\n    let round = LocalDataStoreRetriever.getCurrentRoundInQuiznight(quiznightCode);\n    let questionToUpdate = round.chosenQuestions.find((q) => {\n      return q._id == question;\n    })\n    questionToUpdate.hasBeenReviewed = true;\n  },\n  removeQuiznightByCode(quiznightCode) {\n    let quiznights = LocalDataStoreRetriever.getAllQuiznights(quiznightCode);\n    for(let i = 0; i < quiznights.length; i++) {\n      if(quiznights[i].quiznight == quiznightCode) {\n        quiznights.splice(i, 1);\n      }\n    }\n  }\n};\n\nexport default LocalDataStoreHandler;"]}