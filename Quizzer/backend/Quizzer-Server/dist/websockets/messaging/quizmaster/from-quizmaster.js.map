{"version":3,"sources":["../../../../src/websockets/messaging/quizmaster/from-quizmaster.js"],"names":["socket","quiznightNamespace","on","CONNECT_QUIZMASTER","message","join","QUIZMASTER","toNamespace","usingSocket","sendMessage","PENDING","ACCEPT_TEAM","messageToTeam","isAccepted","team","sendMessageToSocketViaId","socketId","TEAM_ALLOWED","qnCode","removeTeamInQuiznightFromCache","teamName","then","disconnectSocket","START_ROUND","saveNewQuiznightRoundToCache","result","sendMessageToAllTeams","NEXT_QUESTION","NEW_QUESTION","question","sendNewQuestionMessage","_id","category","CLOSE_QUESTION","sendShowQuestionResultsMessage","UPDATE_SCORE","givenAnswers","givenAnswer","getSocketIdFromTeam","isCorrect","incrementCorrectAnswersOfTeam","round","ANSWER_REVIEWED","correctAnswer","answer","END_ROUND","updateRoundPointsOfAllTeams","sendShowScoresMessage","END_GAME","removeQuiznightByCode","removeQuiznight"],"mappings":"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","file":"from-quizmaster.js","sourcesContent":["import DatabaseCacheHandler from '../../data-stores/database';\nimport { getQuiznightCodeFromSocket } from '../../utils';\nimport MESSAGE_TYPES from '../../constants/message_types';\nimport QuizmasterMessageSender from '../quizmaster/to-quizmaster';\nimport Quiznight from '../../../models/Quiznight';\nimport ROOM_NAMES from '../../constants/rooms';\nimport ScoreboardMessageSender from '../scoreboard/to-scoreboard';\nimport TeamMessageSender from '../teams/to-teams';\nimport LocalDataStoreHandler from '../../data-stores/local';\n\nexport default (socket, quiznightNamespace) => {\n\n  socket.on(MESSAGE_TYPES.CONNECT_QUIZMASTER, (message) => {\n    socket.join(ROOM_NAMES.QUIZMASTER);\n\n    QuizmasterMessageSender\n      .toNamespace(quiznightNamespace)\n      .usingSocket(socket)\n      .sendMessage(MESSAGE_TYPES.PENDING, 'Welcome to the quiznight quizmaster!, waiting for teams to apply..')\n  });\n\n  socket.on(MESSAGE_TYPES.ACCEPT_TEAM, (message) => {\n    let messageToTeam = { isAccepted: message.team.isAccepted };\n    TeamMessageSender\n      .toNamespace(quiznightNamespace)\n      .usingSocket(socket)\n      .sendMessageToSocketViaId(message.team.socketId, MESSAGE_TYPES.TEAM_ALLOWED, \"Accepted, waiting for other teams..\");\n\n    if(!messageToTeam.isAccepted) {\n      let qnCode = getQuiznightCodeFromSocket(socket);\n      LocalDataStoreHandler\n        .removeTeamInQuiznightFromCache(qnCode, message.team.teamName);\n\n      DatabaseCacheHandler\n        .removeTeamInQuiznightFromCache(qnCode, message.team.teamName)\n      .then(TeamMessageSender.disconnectSocket(message.team.socketId));\n      // TODO: leave werkt nog niet\n    }\n  });\n\n  socket.on(MESSAGE_TYPES.START_ROUND, (message) => {\n    let qnCode = getQuiznightCodeFromSocket(socket);\n    LocalDataStoreHandler\n      .saveNewQuiznightRoundToCache(qnCode);\n\n    DatabaseCacheHandler\n      .saveNewQuiznightRoundToCache(qnCode)\n      .then((result) => {\n        TeamMessageSender\n          .toNamespace(quiznightNamespace)\n          .usingSocket(socket)\n          .sendMessageToAllTeams(MESSAGE_TYPES.PENDING, 'Round has started, waiting for the quizmaster to submit questions')\n      });\n  });\n\n  socket.on(MESSAGE_TYPES.NEXT_QUESTION, (message) => {\n    TeamMessageSender\n      .toNamespace(quiznightNamespace)\n      .usingSocket(socket)\n      .sendMessageToAllTeams(MESSAGE_TYPES.NEW_QUESTION, { question: message.question });\n\n    let qnCode = getQuiznightCodeFromSocket(socket);\n    ScoreboardMessageSender\n      .toNamespace(quiznightNamespace)\n      .usingSocket(socket)\n      .sendNewQuestionMessage(qnCode, message.question._id, message.question.category);\n  });\n\n  socket.on(MESSAGE_TYPES.CLOSE_QUESTION, (message) => {\n    TeamMessageSender\n      .toNamespace(quiznightNamespace)\n      .usingSocket(socket)\n      .sendMessageToAllTeams(MESSAGE_TYPES.PENDING, 'Quizmaster is currently reviewing answers.');\n\n    let qnCode = getQuiznightCodeFromSocket(socket);\n    ScoreboardMessageSender\n      .toNamespace(quiznightNamespace)\n      .usingSocket(socket)\n      .sendShowQuestionResultsMessage(qnCode, message.question._id, message.question.category);\n  });\n\n  socket.on(MESSAGE_TYPES.UPDATE_SCORE, (message) => {\n    let qnCode = getQuiznightCodeFromSocket(socket);\n    for(let givenAnswer of message.givenAnswers) {\n      let socketId = LocalDataStoreHandler\n        .getSocketIdFromTeam(qnCode, givenAnswer.teamName);\n\n      if(givenAnswer.isCorrect) {\n        LocalDataStoreHandler\n          .incrementCorrectAnswersOfTeam(qnCode, message.round, givenAnswer.teamName);\n\n        DatabaseCacheHandler\n          .incrementCorrectAnswersOfTeam(qnCode, message.round, givenAnswer.teamName);\n      }\n      TeamMessageSender\n        .toNamespace(quiznightNamespace)\n        .sendMessageToSocketViaId(socketId, MESSAGE_TYPES.ANSWER_REVIEWED, { correctAnswer: message.answer, isCorrect: givenAnswer.isCorrect });\n    }\n    // TODO: zet vraag op gereviewed bij chosenquestions\n  });\n\n  socket.on(MESSAGE_TYPES.END_ROUND, (message) => {\n    // Loop door lijst met teams\n    // 1. update roundpoints in database\n    let qnCode = getQuiznightCodeFromSocket(socket);\n\n    LocalDataStoreHandler\n      .updateRoundPointsOfAllTeams(qnCode);\n\n    ScoreboardMessageSender\n      .toNamespace(quiznightNamespace)\n      .usingSocket(socket)\n      .sendShowScoresMessage(qnCode);\n\n    TeamMessageSender\n      .toNamespace(quiznightNamespace)\n      .usingSocket(socket)\n      .sendMessageToAllTeams(MESSAGE_TYPES.PENDING, 'Round has ended');\n  });\n\n  socket.on(MESSAGE_TYPES.END_GAME, (message) => {\n    // Loop door lijst met teams\n    // 1. haal quiznight uit database\n    let qnCode = getQuiznightCodeFromSocket(socket);\n\n    LocalDataStoreHandler\n      .removeQuiznightByCode(qnCode);\n\n    DatabaseCacheHandler\n      .removeQuiznight(qnCode)\n      .then(() => {\n        TeamMessageSender\n          .toNamespace(quiznightNamespace)\n          .usingSocket(socket)\n          .sendMessageToAllTeams(MESSAGE_TYPES.PENDING, 'Game has ended');\n      });\n  });\n}"]}